#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è flavor_category_id –≤ —Ç–∞–±–ª–∏—Ü—É products
"""

import asyncio
import asyncpg
from config import DATABASE_URL


async def add_flavor_field():
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ flavor_category_id –≤ —Ç–∞–±–ª–∏—Ü—É products"""
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(DATABASE_URL)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ
        column_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'products' 
                AND column_name = 'flavor_category_id'
            )
        """)
        
        if column_exists:
            print("‚ö†Ô∏è  –ü–æ–ª–µ flavor_category_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ products")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ flavor_category_id
            await conn.execute("""
                ALTER TABLE products 
                ADD COLUMN flavor_category_id INTEGER 
                REFERENCES flavor_categories(id) ON DELETE SET NULL
            """)
            print("‚úÖ –ü–æ–ª–µ flavor_category_id –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É products")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        columns = await conn.fetch("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'products' 
            ORDER BY ordinal_position
        """)
        
        print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã products:")
        for col in columns:
            nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
            print(f"   {col['column_name']} ({col['data_type']}) {nullable}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
        foreign_keys = await conn.fetch("""
            SELECT 
                tc.constraint_name, 
                kcu.column_name,
                ccu.table_name AS foreign_table_name,
                ccu.column_name AS foreign_column_name 
            FROM 
                information_schema.table_constraints AS tc 
                JOIN information_schema.key_column_usage AS kcu
                  ON tc.constraint_name = kcu.constraint_name
                JOIN information_schema.constraint_column_usage AS ccu
                  ON ccu.constraint_name = tc.constraint_name
            WHERE tc.constraint_type = 'FOREIGN KEY' 
            AND tc.table_name = 'products'
        """)
        
        print(f"\nüîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ —Ç–∞–±–ª–∏—Ü—ã products:")
        for fk in foreign_keys:
            print(f"   {fk['column_name']} -> {fk['foreign_table_name']}.{fk['foreign_column_name']}")
        
        await conn.close()
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(add_flavor_field())