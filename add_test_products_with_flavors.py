#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö —Å–∏–≥–∞—Ä–µ—Ç —Å –≤–∫—É—Å–∞–º–∏
"""

import asyncio
import asyncpg
from config import DATABASE_URL
from decimal import Decimal


async def add_test_products():
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –≤–∫—É—Å–∞–º–∏"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–∫—É—Å–∞–º
    test_products = [
        # –Ø–≥–æ–¥–Ω—ã–µ –≤–∫—É—Å—ã (flavor_category_id = 1)
        {
            'name': 'Elf Bar 600 Strawberry Ice',
            'price': Decimal('15.00'),
            'description': '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ —Å —è—Ä–∫–∏–º –≤–∫—É—Å–æ–º –∫–ª—É–±–Ω–∏–∫–∏ –∏ –æ—Ö–ª–∞–∂–¥–∞—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º. 600 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 1,  # Elf Bar
            'flavor_category_id': 1,  # –Ø–≥–æ–¥–Ω—ã–µ
            'stock_quantity': 25
        },
        {
            'name': 'VOZOL Gear 10000 Blueberry',
            'price': Decimal('28.00'),
            'description': '–ü—Ä–µ–º–∏—É–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –≤–∫—É—Å–æ–º —á–µ—Ä–Ω–∏–∫–∏. 10000 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 2,  # VOZOL
            'flavor_category_id': 1,  # –Ø–≥–æ–¥–Ω—ã–µ
            'stock_quantity': 15
        },
        {
            'name': 'LOST MARY Berry Mix',
            'price': Decimal('22.00'),
            'description': '–ú–∏–∫—Å –ª–µ—Å–Ω—ã—Ö —è–≥–æ–¥ –≤ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ. 5000 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 3,  # LOST MARY
            'flavor_category_id': 1,  # –Ø–≥–æ–¥–Ω—ã–µ
            'stock_quantity': 20
        },
        
        # –ú–µ–Ω—Ç–æ–ª/–õ–µ–¥ (flavor_category_id = 2)
        {
            'name': 'Geek Bar Pulse Cool Mint',
            'price': Decimal('32.00'),
            'description': '–û—Å–≤–µ–∂–∞—é—â–∏–π –º–µ–Ω—Ç–æ–ª —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π Pulse. 15000 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 4,  # Geek Bar
            'flavor_category_id': 2,  # –ú–µ–Ω—Ç–æ–ª/–õ–µ–¥
            'stock_quantity': 18
        },
        {
            'name': 'HQD Cuvie Ice Mint',
            'price': Decimal('18.00'),
            'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ª–µ–¥—è–Ω–æ–π –º–µ–Ω—Ç–æ–ª –¥–ª—è –æ—Å–≤–µ–∂–µ–Ω–∏—è. 3000 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 5,  # HQD
            'flavor_category_id': 2,  # –ú–µ–Ω—Ç–æ–ª/–õ–µ–¥
            'stock_quantity': 30
        },
        
        # –¶–∏—Ç—Ä—É—Å—ã (flavor_category_id = 3)
        {
            'name': 'Puff Bar Plus Lemon Ice',
            'price': Decimal('12.00'),
            'description': '–ö–∏—Å–ª—ã–π –ª–∏–º–æ–Ω —Å –ª–µ–¥—è–Ω—ã–º–∏ –Ω–æ—Ç–∫–∞–º–∏. 800 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 6,  # Puff Bar
            'flavor_category_id': 3,  # –¶–∏—Ç—Ä—É—Å—ã
            'stock_quantity': 35
        },
        {
            'name': 'Elf Bar BC5000 Orange Soda',
            'price': Decimal('20.00'),
            'description': '–í–∫—É—Å –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–æ–π –≥–∞–∑–∏—Ä–æ–≤–∫–∏. 5000 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 1,  # Elf Bar
            'flavor_category_id': 3,  # –¶–∏—Ç—Ä—É—Å—ã
            'stock_quantity': 22
        },
        
        # –≠–∫–∑–æ—Ç–∏–∫–∞ (flavor_category_id = 4)
        {
            'name': 'Air Bar Lux Mango Ice',
            'price': Decimal('16.00'),
            'description': '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –º–∞–Ω–≥–æ —Å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ–º. 2500 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 8,  # Air Bar
            'flavor_category_id': 4,  # –≠–∫–∑–æ—Ç–∏–∫–∞
            'stock_quantity': 28
        },
        {
            'name': 'Hyde Edge Passion Fruit',
            'price': Decimal('25.00'),
            'description': '–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä–∞–∫—É–π—è –≤ –º–æ—â–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. 6000 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 7,  # Hyde
            'flavor_category_id': 4,  # –≠–∫–∑–æ—Ç–∏–∫–∞
            'stock_quantity': 12
        },
        
        # –°–ª–∞–¥–∫–∏–µ (flavor_category_id = 5)
        {
            'name': 'Fume Extra Vanilla Custard',
            'price': Decimal('19.00'),
            'description': '–ù–µ–∂–Ω—ã–π –≤–∞–Ω–∏–ª—å–Ω—ã–π –∫—Ä–µ–º. 1500 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 9,  # Fume
            'flavor_category_id': 5,  # –°–ª–∞–¥–∫–∏–µ
            'stock_quantity': 20
        },
        {
            'name': 'Breeze Plus Cotton Candy',
            'price': Decimal('14.00'),
            'description': '–°–ª–∞–¥–∫–∞—è —Å–∞—Ö–∞—Ä–Ω–∞—è –≤–∞—Ç–∞. 2000 –∑–∞—Ç—è–∂–µ–∫.',
            'category_id': 10,  # Breeze
            'flavor_category_id': 5,  # –°–ª–∞–¥–∫–∏–µ
            'stock_quantity': 25
        }
    ]
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(DATABASE_URL)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        added_count = 0
        for product in test_products:
            try:
                await conn.execute("""
                    INSERT INTO products (name, price, description, category_id, flavor_category_id, stock_quantity, in_stock) 
                    VALUES ($1, $2, $3, $4, $5, $6, true)
                """, 
                product['name'], 
                product['price'], 
                product['description'], 
                product['category_id'], 
                product['flavor_category_id'], 
                product['stock_quantity'])
                
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {product['name']}")
                added_count += 1
                
            except asyncpg.UniqueViolationError:
                print(f"‚ö†Ô∏è  –¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {product['name']}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {product['name']}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        flavor_stats = await conn.fetch("""
            SELECT 
                fc.name as flavor_name,
                fc.emoji,
                COUNT(p.id) as products_count
            FROM flavor_categories fc
            LEFT JOIN products p ON fc.id = p.flavor_category_id AND p.in_stock = true
            GROUP BY fc.id, fc.name, fc.emoji
            ORDER BY fc.id
        """)
        
        print(f"\nüéâ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {added_count}")
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∫—É—Å–∞–º:")
        for stat in flavor_stats:
            print(f"   {stat['emoji']} {stat['flavor_name']}: {stat['products_count']} —Ç–æ–≤–∞—Ä–æ–≤")
        
        await conn.close()
        print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(add_test_products())