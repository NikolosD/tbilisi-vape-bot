# ============== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò ==============

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from config import ADMIN_IDS, SUPER_ADMIN_ID
from keyboards import get_admin_management_keyboard, get_admins_list_keyboard

router = Router()

class AdminManagementStates(StatesGroup):
    waiting_admin_id = State()

@router.callback_query(F.data == "manage_admins")
async def manage_admins(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)"""
    if callback.from_user.id != SUPER_ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_management_keyboard(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "add_admin")
async def add_admin_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id != SUPER_ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    await state.set_state(AdminManagementStates.waiting_admin_id)
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "üí° <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID —É –±–æ—Ç–∞ @userinfobot</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_admins")]
        ]),
        parse_mode='HTML'
    )

@router.message(AdminManagementStates.waiting_admin_id)
async def process_admin_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    print(f"DEBUG: process_admin_id called, user_id={message.from_user.id}, text={message.text}")
    print(f"DEBUG: SUPER_ADMIN_ID={SUPER_ADMIN_ID}")
    
    if message.from_user.id != SUPER_ADMIN_ID:
        print(f"DEBUG: Not super admin, deleting message")
        await message.delete()
        return
    
    print(f"DEBUG: Processing admin ID...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.forward_from:
        new_admin_id = message.forward_from.id
        username = message.forward_from.username
        first_name = message.forward_from.first_name
    else:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ —Ç–µ–∫—Å—Ç–∞
        try:
            new_admin_id = int(message.text.strip())
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                chat = await message.bot.get_chat(new_admin_id)
                username = chat.username
                first_name = chat.first_name
            except:
                username = None
                first_name = f"User {new_admin_id}"
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="add_admin")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_admins")]
                ])
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–æ–º
    if new_admin_id in ADMIN_IDS or await db.is_admin_in_db(new_admin_id):
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_admins")]
            ])
        )
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.add_admin(new_admin_id, username, first_name, message.from_user.id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ ADMIN_IDS
    if new_admin_id not in ADMIN_IDS:
        ADMIN_IDS.append(new_admin_id)
    
    await message.answer(
        f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
        f"üë§ –ò–º—è: {first_name}\n"
        f"üÜî ID: {new_admin_id}\n"
        f"üì± Username: @{username if username else '–ù–µ—Ç'}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_admin")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_admins")]
        ]),
        parse_mode='HTML'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É
    try:
        await message.bot.send_message(
            new_admin_id,
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n"
            f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode='HTML'
        )
    except:
        pass
    
    await state.clear()

@router.callback_query(F.data == "remove_admin")
async def remove_admin_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if callback.from_user.id != SUPER_ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    admins = await db.get_all_admins()
    
    if not admins:
        await callback.message.edit_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_admins")]
            ]),
            parse_mode='HTML'
        )
        return
    
    await callback.message.edit_text(
        "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_admins_list_keyboard(admins, action="del"),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("del_admin_"))
async def remove_admin_confirm(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user.id != SUPER_ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    admin_id = int(callback.data.split("_")[2])
    
    # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    if admin_id == SUPER_ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.remove_admin(admin_id)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ ADMIN_IDS
    if admin_id in ADMIN_IDS:
        ADMIN_IDS.remove(admin_id)
    
    await callback.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await remove_admin_list(callback)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–≤—à–µ–º—É –∞–¥–º–∏–Ω—É
    try:
        await callback.bot.send_message(
            admin_id,
            "‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
            "–í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.\n"
            "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            parse_mode='HTML'
        )
    except:
        pass

@router.callback_query(F.data == "list_admins")
async def list_admins(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if callback.from_user.id != SUPER_ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    db_admins = await db.get_all_admins()
    
    text = "üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
    
    # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω
    text += "üëë <b>–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b>\n"
    try:
        super_admin = await callback.bot.get_chat(SUPER_ADMIN_ID)
        text += f"‚Ä¢ {super_admin.first_name} (@{super_admin.username if super_admin.username else '–ù–µ—Ç'}) - ID: {SUPER_ADMIN_ID}\n\n"
    except:
        text += f"‚Ä¢ ID: {SUPER_ADMIN_ID}\n\n"
    
    # –û–±—ã—á–Ω—ã–µ –∞–¥–º–∏–Ω—ã
    if db_admins:
        text += "üëÆ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n"
        for admin in db_admins:
            user_id = admin[0]
            username = admin[1] or '–ù–µ—Ç'
            first_name = admin[2] or f'User {user_id}'
            added_at = admin[4]
            
            text += f"‚Ä¢ {first_name} (@{username}) - ID: {user_id}\n"
            if added_at:
                text += f"  <i>–î–æ–±–∞–≤–ª–µ–Ω: {added_at.strftime('%d.%m.%Y %H:%M')}</i>\n"
    else:
        text += "<i>–î—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç</i>\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_admins")]
        ]),
        parse_mode='HTML'
    )