"""
–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∏ DDoS –¥–ª—è Telegram –±–æ—Ç–∞
"""
import time
import asyncio
from typing import Dict, List, Set
from dataclasses import dataclass, field
from collections import defaultdict
import logging

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
try:
    from security_monitor import security_monitor
    MONITORING_ENABLED = True
except ImportError:
    MONITORING_ENABLED = False
    security_monitor = None

@dataclass
class UserStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º—ã"""
    message_count: int = 0
    last_message_time: float = 0
    blocked_until: float = 0
    warning_count: int = 0
    spam_score: int = 0
    recent_messages: List[float] = field(default_factory=list)

class AntiSpamSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞"""
    
    def __init__(self):
        self.user_stats: Dict[int, UserStats] = defaultdict(UserStats)
        self.blocked_users: Set[int] = set()
        self.admin_ids: Set[int] = set()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        self.MAX_MESSAGES_PER_MINUTE = 50  # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É (—É–≤–µ–ª–∏—á–µ–Ω–æ –≤ 5 —Ä–∞–∑)
        self.MAX_MESSAGES_PER_HOUR = 300   # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å (—É–≤–µ–ª–∏—á–µ–Ω–æ –≤ 5 —Ä–∞–∑)
        self.MIN_MESSAGE_INTERVAL = 0.2    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—É–º–µ–Ω—å—à–µ–Ω–æ –≤ 5 —Ä–∞–∑)
        self.SPAM_THRESHOLD = 250          # –ü–æ—Ä–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞ —Å–ø–∞–º (—É–≤–µ–ª–∏—á–µ–Ω–æ –≤ 5 —Ä–∞–∑)
        self.BLOCK_DURATION = 300          # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (5 –º–∏–Ω—É—Ç)
        self.WARNING_THRESHOLD = 15        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ –≤ 5 —Ä–∞–∑)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø–∞–º–∞
        self.SPAM_PATTERNS = [
            "—Ä–µ–∫–ª–∞–º–∞", "spam", "casino", "bitcoin", "crypto", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫",
            "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "—Å–∫–∏–¥–∫–∞", "–∞–∫—Ü–∏—è", "–ø—Ä–æ–º–æ–∫–æ–¥", "wwww", "http",
            "telegram.me", "t.me", "@", "–∫–∞–Ω–∞–ª", "–ø–æ–¥–ø–∏—Å–∫–∞"
        ]
        
    def set_admin_ids(self, admin_ids: List[int]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–æ–Ω–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è)"""
        self.admin_ids = set(admin_ids)
        if MONITORING_ENABLED:
            security_monitor.set_admin_ids(admin_ids)
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.admin_ids
    
    def is_blocked(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        if self.is_admin(user_id):
            return False
            
        stats = self.user_stats[user_id]
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if stats.blocked_until > current_time:
            return True
            
        # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        if stats.blocked_until > 0 and stats.blocked_until <= current_time:
            stats.blocked_until = 0
            stats.spam_score = max(0, stats.spam_score - 10)  # –°–Ω–∏–∂–∞–µ–º —Å–ø–∞–º-—Å—á–µ—Ç
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            
        return user_id in self.blocked_users
    
    def check_rate_limit(self, user_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self.is_admin(user_id):
            return True, ""
            
        stats = self.user_stats[user_id]
        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
        stats.recent_messages = [
            msg_time for msg_time in stats.recent_messages 
            if current_time - msg_time < 3600
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (current_time - stats.last_message_time) < self.MIN_MESSAGE_INTERVAL:
            stats.spam_score += 5
            return False, f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {self.MIN_MESSAGE_INTERVAL} —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É
        recent_minute = [
            msg_time for msg_time in stats.recent_messages 
            if current_time - msg_time < 60
        ]
        if len(recent_minute) >= self.MAX_MESSAGES_PER_MINUTE:
            stats.spam_score += 10
            return False, f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É ({self.MAX_MESSAGES_PER_MINUTE}). –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ —á–∞—Å
        if len(stats.recent_messages) >= self.MAX_MESSAGES_PER_HOUR:
            stats.spam_score += 15
            return False, f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å ({self.MAX_MESSAGES_PER_HOUR}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        return True, ""
    
    def check_spam_content(self, text: str) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å–ø–∞–º"""
        if not text:
            return True, ""
            
        text_lower = text.lower()
        spam_words_found = []
        
        for pattern in self.SPAM_PATTERNS:
            if pattern in text_lower:
                spam_words_found.append(pattern)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (aaaaaaa, wwwwww)
        for char in text_lower:
            if char.isalpha() and text_lower.count(char) > 7:
                spam_words_found.append("–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã")
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏
        emoji_count = sum(1 for char in text if ord(char) > 0x1F000)
        if emoji_count > 10:
            spam_words_found.append("–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏")
        
        if spam_words_found:
            return False, f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–ø–∞–º–∞: {', '.join(spam_words_found[:3])}"
        
        return True, ""
    
    def process_message(self, user_id: int, text: str = "") -> tuple[bool, str]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.is_admin(user_id):
            return True, ""
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if self.is_blocked(user_id):
            stats = self.user_stats[user_id]
            if stats.blocked_until > time.time():
                remaining = int(stats.blocked_until - time.time())
                return False, f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {remaining} —Å–µ–∫—É–Ω–¥ –∑–∞ —Å–ø–∞–º."
            else:
                return False, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —á–∞—Å—Ç–æ—Ç—ã
        rate_ok, rate_msg = self.check_rate_limit(user_id)
        if not rate_ok:
            self._apply_penalty(user_id, rate_msg)
            return False, rate_msg
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å–ø–∞–º
        content_ok, content_msg = self.check_spam_content(text)
        if not content_ok:
            stats = self.user_stats[user_id]
            stats.spam_score += 20
            self._apply_penalty(user_id, content_msg)
            return False, content_msg
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self._record_message(user_id)
        return True, ""
    
    def _record_message(self, user_id: int):
        """–ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        stats = self.user_stats[user_id]
        current_time = time.time()
        
        stats.message_count += 1
        stats.last_message_time = current_time
        stats.recent_messages.append(current_time)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if MONITORING_ENABLED:
            security_monitor.log_message(user_id)
        
        # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º —Å–ø–∞–º-—Å—á–µ—Ç –∑–∞ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if stats.spam_score > 0 and current_time - stats.last_message_time > 60:
            stats.spam_score = max(0, stats.spam_score - 1)
    
    def _apply_penalty(self, user_id: int, reason: str):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ"""
        stats = self.user_stats[user_id]
        
        logger.warning(f"–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {reason}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        stats.warning_count += 1
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if MONITORING_ENABLED:
            security_monitor.log_event(
                "USER_WARNING",
                user_id,
                reason,
                "medium"
            )
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ —Å–ø–∞–º–∞
        if stats.spam_score >= self.SPAM_THRESHOLD:
            self.block_user(user_id, self.BLOCK_DURATION, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–ø–∞–º–∞ (—Å—á–µ—Ç: {stats.spam_score})")
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –º–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        elif stats.warning_count >= self.WARNING_THRESHOLD:
            self.block_user(user_id, self.BLOCK_DURATION, f"–ú–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ({stats.warning_count})")
    
    def block_user(self, user_id: int, duration: int = 0, reason: str = ""):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.is_admin(user_id):
            return
            
        stats = self.user_stats[user_id]
        current_time = time.time()
        
        if duration > 0:
            stats.blocked_until = current_time + duration
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if MONITORING_ENABLED:
                security_monitor.log_user_blocked(user_id, reason, duration)
        else:
            self.blocked_users.add(user_id)
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
            if MONITORING_ENABLED:
                security_monitor.log_user_blocked(user_id, reason, 0)
    
    def unblock_user(self, user_id: int):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = self.user_stats[user_id]
        stats.blocked_until = 0
        stats.spam_score = 0
        stats.warning_count = 0
        
        if user_id in self.blocked_users:
            self.blocked_users.remove(user_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if MONITORING_ENABLED:
            security_monitor.log_event(
                "USER_UNBLOCKED",
                user_id,
                "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                "low"
            )
    
    def get_user_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = self.user_stats[user_id]
        current_time = time.time()
        
        return {
            "user_id": user_id,
            "message_count": stats.message_count,
            "spam_score": stats.spam_score,
            "warning_count": stats.warning_count,
            "is_blocked": self.is_blocked(user_id),
            "blocked_until": stats.blocked_until,
            "remaining_block_time": max(0, int(stats.blocked_until - current_time)),
            "messages_last_hour": len([
                msg_time for msg_time in stats.recent_messages 
                if current_time - msg_time < 3600
            ])
        }
    
    def get_blocked_users(self) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        blocked = []
        current_time = time.time()
        
        for user_id, stats in self.user_stats.items():
            if self.is_blocked(user_id):
                remaining = max(0, int(stats.blocked_until - current_time))
                blocked.append({
                    "user_id": user_id,
                    "spam_score": stats.spam_score,
                    "warning_count": stats.warning_count,
                    "remaining_time": remaining,
                    "permanent": user_id in self.blocked_users
                })
        
        return blocked

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã
anti_spam = AntiSpamSystem()