"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

from typing import List, Dict, Any, Optional, Callable
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from i18n import _


class PaginationComponent:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    
    def __init__(self, items_per_page: int = 5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
        Args:
            items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        """
        self.items_per_page = items_per_page
    
    def paginate(self, items: List[Any], page: int = 1) -> Dict[str, Any]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:
            {
                'items': [...],  # –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                'page': 1,       # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                'total_pages': 3, # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                'total_items': 15, # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                'has_prev': False, # –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                'has_next': True,  # –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                'start_index': 0,  # –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                'end_index': 5     # –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            }
        """
        if not items:
            return {
                'items': [],
                'page': 1,
                'total_pages': 0,
                'total_items': 0,
                'has_prev': False,
                'has_next': False,
                'start_index': 0,
                'end_index': 0
            }
        
        total_items = len(items)
        total_pages = (total_items + self.items_per_page - 1) // self.items_per_page
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1:
            page = 1
        elif page > total_pages:
            page = total_pages
        
        start_index = (page - 1) * self.items_per_page
        end_index = min(start_index + self.items_per_page, total_items)
        page_items = items[start_index:end_index]
        
        return {
            'items': page_items,
            'page': page,
            'total_pages': total_pages,
            'total_items': total_items,
            'has_prev': page > 1,
            'has_next': page < total_pages,
            'start_index': start_index,
            'end_index': end_index
        }
    
    def create_pagination_keyboard(
        self,
        pagination_info: Dict[str, Any],
        callback_prefix: str,
        user_id: int,
        item_button_generator: Optional[Callable] = None,
        additional_buttons: Optional[List[List[InlineKeyboardButton]]] = None
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Args:
            pagination_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–∑ –º–µ—Ç–æ–¥–∞ paginate()
            callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "orders_page")
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            item_button_generator: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                                 –î–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å (item, index) –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å InlineKeyboardButton
            additional_buttons: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            
        Returns:
            InlineKeyboardMarkup —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        """
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)
        if item_button_generator and pagination_info['items']:
            for i, item in enumerate(pagination_info['items']):
                button = item_button_generator(item, pagination_info['start_index'] + i)
                if isinstance(button, list):
                    keyboard.append(button)
                else:
                    keyboard.append([button])
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        if pagination_info['total_pages'] > 1:
            pagination_row = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
            if pagination_info['has_prev']:
                pagination_row.append(
                    InlineKeyboardButton(
                        text=f"‚¨ÖÔ∏è {_('common.prev_page', user_id=user_id)}",
                        callback_data=f"{callback_prefix}_{pagination_info['page'] - 1}"
                    )
                )
            
            # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
            if pagination_info['has_next']:
                pagination_row.append(
                    InlineKeyboardButton(
                        text=f"{_('common.next_page', user_id=user_id)} ‚û°Ô∏è",
                        callback_data=f"{callback_prefix}_{pagination_info['page'] + 1}"
                    )
                )
            
            if pagination_row:
                keyboard.append(pagination_row)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if additional_buttons:
            keyboard.extend(additional_buttons)
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_page_info_text(self, pagination_info: Dict[str, Any], user_id: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Args:
            pagination_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/3" –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        """
        if pagination_info['total_pages'] <= 1:
            return ""
        
        return f"üìÑ {_('common.page', user_id=user_id)} {pagination_info['page']}/{pagination_info['total_pages']}\n\n"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
pagination = PaginationComponent()