from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json

from database import db
from config import ADMIN_IDS, DELIVERY_ZONES
from keyboards import (
    get_admin_keyboard, get_admin_products_keyboard, 
    get_admin_orders_keyboard, get_admin_order_actions_keyboard
)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
class AdminStates(StatesGroup):
    waiting_product_name = State()
    waiting_product_price = State()
    waiting_product_description = State()
    waiting_product_photo = State()
    waiting_broadcast_message = State()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def admin_filter(message_or_callback):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message_or_callback.from_user.id
    return user_id in ADMIN_IDS

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@router.callback_query(F.data == "admin_panel", admin_filter)
async def show_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    pending_orders = db.get_pending_orders()
    
    await callback.message.edit_text(
        f"üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(pending_orders)}\n"
        f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {len(db.get_products())}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode='HTML'
    )

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
@router.callback_query(F.data == "admin_products", admin_filter)
async def admin_products_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    products = db.get_products()
    
    await callback.message.edit_text(
        f"üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
        f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}",
        reply_markup=get_admin_products_keyboard(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "admin_add_product", admin_filter)
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_product_name)

@router.message(AdminStates.waiting_product_name, admin_filter)
async def process_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_name = message.text
    await state.update_data(name=product_name)
    
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ –ª–∞—Ä–∏):",
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_product_price)

@router.message(AdminStates.waiting_product_price, admin_filter)
async def process_product_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
        return
    
    data = await state.get_data()
    await state.update_data(price=price)
    
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}‚Çæ\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_product_description)

@router.message(AdminStates.waiting_product_description, admin_filter)
async def process_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    description = message.text
    data = await state.get_data()
    await state.update_data(description=description)
    
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –±–µ–∑ —Ñ–æ—Ç–æ):",
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_product_photo)

@router.message(AdminStates.waiting_product_photo, F.content_type == 'photo', admin_filter)
async def process_product_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    photo_file_id = message.photo[-1].file_id
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É
    db.add_product(
        name=data['name'],
        price=data['price'],
        description=data['description'],
        photo=photo_file_id
    )
    
    await message.answer(
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üì∏ <b>–§–æ—Ç–æ:</b> –î–æ–±–∞–≤–ª–µ–Ω–æ",
        parse_mode='HTML'
    )
    
    await state.clear()

@router.message(AdminStates.waiting_product_photo, F.text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", admin_filter)
async def process_product_no_photo(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –±–µ–∑ —Ñ–æ—Ç–æ
    db.add_product(
        name=data['name'],
        price=data['price'],
        description=data['description'],
        photo=None
    )
    
    await message.answer(
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üì∏ <b>–§–æ—Ç–æ:</b> –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
        parse_mode='HTML'
    )
    
    await state.clear()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
@router.callback_query(F.data == "admin_orders", admin_filter)
async def admin_orders_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    orders = db.get_pending_orders()
    
    if not orders:
        await callback.message.edit_text(
            "üìã <b>–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n"
            "–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.",
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        return
    
    await callback.message.edit_text(
        f"üìã <b>–ó–∞–∫–∞–∑—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è</b>\n\n"
        f"–í—Å–µ–≥–æ: {len(orders)} –∑–∞–∫–∞–∑–æ–≤\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_admin_orders_keyboard(orders),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("admin_order_"), admin_filter)
async def show_admin_order(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    order_id = int(callback.data.split("_")[2])
    order = db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã
    products = json.loads(order[2])
    user = db.get_user(order[1])
    
    status_text = {
        'waiting_payment': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'payment_check': 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã',
        'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
        'shipping': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    }
    
    order_text = f"""üìã <b>–ó–∞–∫–∞–∑ #{order[0]}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {user[2] if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ Username: @{user[1] if user and user[1] else '–Ω–µ—Ç'}
‚Ä¢ ID: {order[1]}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for product in products:
        order_text += f"‚Ä¢ {product['name']} √ó {product['quantity']} = {product['price'] * product['quantity']}‚Çæ\n"
    
    zone_info = DELIVERY_ZONES.get(order[4], {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
    
    order_text += f"""
üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {zone_info['name']} - {order[5]}‚Çæ
üìç <b>–ê–¥—Ä–µ—Å:</b> {order[7]}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order[6]}
üìÖ <b>–î–∞—Ç–∞:</b> {order[10][:16]}

üí∞ <b>–ò—Ç–æ–≥–æ: {order[3]}‚Çæ</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text.get(order[8], order[8])}"""
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if order[9]:  # payment_screenshot
        try:
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=order[9],
                caption=order_text,
                reply_markup=get_admin_order_actions_keyboard(order_id, order[8]),
                parse_mode='HTML'
            )
        except:
            await callback.message.edit_text(
                order_text + "\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω",
                reply_markup=get_admin_order_actions_keyboard(order_id, order[8]),
                parse_mode='HTML'
            )
    else:
        await callback.message.edit_text(
            order_text,
            reply_markup=get_admin_order_actions_keyboard(order_id, order[8]),
            parse_mode='HTML'
        )

# –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏
@router.callback_query(F.data.startswith("admin_confirm_payment_"), admin_filter)
async def confirm_payment(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[3])
    order = db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    db.update_order_status(order_id, 'paid')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await callback.message.bot.send_message(
            order[1],  # user_id
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
            f"–ì–æ—Ç–æ–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ! üì¶",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await show_admin_order(callback)

@router.callback_query(F.data.startswith("admin_reject_payment_"), admin_filter)
async def reject_payment(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[3])
    order = db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
    db.update_order_status(order_id, 'waiting_payment')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await callback.message.bot.send_message(
            order[1],  # user_id
            f"‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id}: –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç.",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await show_admin_order(callback)

@router.callback_query(F.data.startswith("admin_ship_"), admin_filter)
async def ship_order(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π"""
    order_id = int(callback.data.split("_")[2])
    order = db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    db.update_order_status(order_id, 'shipping')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await callback.message.bot.send_message(
            order[1],  # user_id
            f"üöö <b>–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏!</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:\n"
            f"{order[7]}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞! üì¶",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer("üöö –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await show_admin_order(callback)

@router.callback_query(F.data.startswith("admin_deliver_"), admin_filter)
async def deliver_order(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π"""
    order_id = int(callback.data.split("_")[2])
    order = db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    db.update_order_status(order_id, 'delivered')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await callback.message.bot.send_message(
            order[1],  # user_id
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üôè\n\n"
            f"–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ—Ç–∑—ã–≤–æ–º!",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    await admin_orders_menu(callback)

@router.callback_query(F.data.startswith("admin_cancel_"), admin_filter)
async def cancel_order(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[2])
    order = db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    db.update_order_status(order_id, 'cancelled')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await callback.message.bot.send_message(
            order[1],  # user_id
            f"‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    await admin_orders_menu(callback)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "admin_stats", admin_filter)
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    all_orders = db.fetchall("SELECT status FROM orders")
    users_count = db.fetchone("SELECT COUNT(*) FROM users")[0]
    products_count = db.fetchone("SELECT COUNT(*) FROM products WHERE in_stock = 1")[0]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_counts = {
        'waiting_payment': 0,
        'payment_check': 0,
        'paid': 0,
        'shipping': 0,
        'delivered': 0,
        'cancelled': 0
    }
    
    for order in all_orders:
        status = order[0]
        if status in status_counts:
            status_counts[status] += 1
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥—ã
    delivered_orders = db.fetchall("SELECT total_price FROM orders WHERE status = 'delivered'")
    total_revenue = sum(order[0] for order in delivered_orders)
    
    stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {users_count}
üì¶ <b>–¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:</b> {products_count}

üìã <b>–ó–∞–∫–∞–∑—ã:</b>
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: {status_counts['waiting_payment']}
üí∞ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {status_counts['payment_check']}
‚úÖ –û–ø–ª–∞—á–µ–Ω—ã: {status_counts['paid']}
üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {status_counts['shipping']}
‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω—ã: {status_counts['delivered']}
‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã: {status_counts['cancelled']}

üí∞ <b>–î–æ—Ö–æ–¥—ã:</b>
–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_revenue:.2f}‚Çæ"""

    await callback.message.edit_text(
        stats_text,
        reply_markup=get_admin_keyboard(),
        parse_mode='HTML'
    )

# –†–∞—Å—Å—ã–ª–∫–∞
@router.callback_query(F.data == "admin_broadcast", admin_filter)
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_broadcast_message)

@router.message(AdminStates.waiting_broadcast_message, admin_filter)
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.fetchall("SELECT user_id FROM users")
    
    sent = 0
    failed = 0
    
    status_msg = await message.answer("üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    for user in users:
        try:
            await message.bot.send_message(user[0], broadcast_text)
            sent += 1
        except:
            failed += 1
    
    await status_msg.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
        parse_mode='HTML'
    )
    
    await state.clear()