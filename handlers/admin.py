from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
import time

from database import db
from config import ADMIN_IDS, DELIVERY_ZONES
from keyboards import (
    get_admin_keyboard, get_enhanced_admin_keyboard, get_admin_products_keyboard, 
    get_admin_orders_keyboard, get_admin_order_actions_keyboard,
    get_admin_categories_keyboard, get_category_selection_keyboard,
    get_change_status_keyboard
)
import i18n
from i18n import _
from anti_spam import anti_spam

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
class AdminStates(StatesGroup):
    waiting_product_name = State()
    waiting_product_price = State()
    waiting_product_description = State()
    waiting_product_photo = State()
    waiting_broadcast_message = State()
    waiting_category_name = State()
    waiting_category_emoji = State()
    waiting_category_description = State()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def admin_filter(message_or_callback):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message_or_callback.from_user.id
    return user_id in ADMIN_IDS

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@router.callback_query(F.data == "admin_panel", admin_filter)
async def show_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–∏–ø–∞–º –∑–∞–∫–∞–∑–æ–≤
    new_orders = await db.get_new_orders()
    checking_orders = await db.get_checking_orders()
    paid_orders = await db.get_paid_orders()
    shipping_orders = await db.get_shipping_orders()
    products = await db.get_products()
    
    await callback.message.edit_text(
        f"üîß <b>–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:</b>\n"
        f"üÜï –ù–æ–≤—ã—Ö: {len(new_orders)}\n"
        f"üí∞ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {len(checking_orders)}\n" 
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {len(paid_orders)}\n"
        f"üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ: {len(shipping_orders)}\n"
        f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_enhanced_admin_keyboard(),
        parse_mode='HTML'
    )

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
@router.callback_query(F.data == "admin_products", admin_filter)
async def admin_products_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    products = await db.get_products()
    
    await callback.message.edit_text(
        f"üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
        f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}",
        reply_markup=get_admin_products_keyboard(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "admin_edit_products", admin_filter)
async def admin_edit_products(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    products = await db.get_products()
    
    if not products:
        await callback.message.edit_text(
            "üì¶ <b>–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=get_admin_products_keyboard(),
            parse_mode='HTML'
        )
        return
    
    keyboard = []
    for product in products:
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚úèÔ∏è {product[1]} - {product[2]}‚Çæ",
                callback_data=f"edit_product_{product[0]}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")])
    
    await callback.message.edit_text(
        "üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("edit_product_"), admin_filter)
async def edit_product_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer(_("common.not_found", user_id=callback.from_user.id), show_alert=True)
        return
    
    keyboard = [
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_product_{product_id}")],
        [InlineKeyboardButton(text="üì¶ –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"toggle_stock_{product_id}")],
        [InlineKeyboardButton(text="üîô –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_edit_products")]
    ]
    
    stock_status = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if product[6] else "‚ùå –°–∫—Ä—ã—Ç"
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product[1]}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product[2]}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product[3] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üì¶ <b>–°—Ç–∞—Ç—É—Å:</b> {stock_status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("delete_product_"), admin_filter)
async def confirm_delete_product(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{product_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")]
    ]
    
    await callback.message.edit_text(
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("confirm_delete_"), admin_filter)
async def delete_product(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    
    await db.execute("DELETE FROM products WHERE id = $1", product_id)
    
    await callback.message.edit_text(
        "‚úÖ <b>–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!</b>\n\n"
        "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")]
        ]),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("toggle_stock_"), admin_filter)
async def toggle_product_stock(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer(_("common.not_found", user_id=callback.from_user.id), show_alert=True)
        return
    
    new_stock = not product[6]  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_product_stock(product_id, new_stock)
    
    status_text = "–ø–æ–∫–∞–∑–∞–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ" if new_stock else "—Å–∫—Ä—ã—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"
    
    await callback.answer(f"‚úÖ –¢–æ–≤–∞—Ä {status_text}!", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_product_{product_id}")],
        [InlineKeyboardButton(text="üì¶ –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"toggle_stock_{product_id}")],
        [InlineKeyboardButton(text="üîô –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_edit_products")]
    ]
    
    stock_status = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if new_stock else "‚ùå –°–∫—Ä—ã—Ç"
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product[1]}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product[2]}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product[3] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üì¶ <b>–°—Ç–∞—Ç—É—Å:</b> {stock_status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "admin_add_product", admin_filter)
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await db.get_categories()
    
    if not categories:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=get_category_selection_keyboard(categories),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("select_category_"), admin_filter)
async def select_category_for_product(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    category_id = int(callback.data.split("_")[2])
    category = await db.get_category(category_id)
    
    await state.update_data(category_id=category_id)
    
    keyboard = [
        [InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")]
    ]
    
    await callback.message.edit_text(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category[2]} {category[1]}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_product_name)

@router.message(AdminStates.waiting_product_name, admin_filter)
async def process_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_name = message.text
    await state.update_data(name=product_name)
    
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ –ª–∞—Ä–∏):",
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_product_price)

@router.message(AdminStates.waiting_product_price, admin_filter)
async def process_product_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
        return
    
    data = await state.get_data()
    await state.update_data(price=price)
    
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}‚Çæ\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_product_description)

@router.message(AdminStates.waiting_product_description, admin_filter)
async def process_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    description = message.text
    data = await state.get_data()
    await state.update_data(description=description)
    
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –±–µ–∑ —Ñ–æ—Ç–æ):",
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_product_photo)

@router.message(AdminStates.waiting_product_photo, F.content_type == 'photo', admin_filter)
async def process_product_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    photo_file_id = message.photo[-1].file_id
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É
    await db.add_product(
        name=data['name'],
        price=data['price'],
        description=data['description'],
        photo=photo_file_id,
        category_id=data.get('category_id')
    )
    
    await message.answer(
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üì∏ <b>–§–æ—Ç–æ:</b> –î–æ–±–∞–≤–ª–µ–Ω–æ",
        parse_mode='HTML'
    )
    
    await state.clear()

@router.message(AdminStates.waiting_product_photo, F.text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", admin_filter)
async def process_product_no_photo(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –±–µ–∑ —Ñ–æ—Ç–æ
    await db.add_product(
        name=data['name'],
        price=data['price'],
        description=data['description'],
        photo=None,
        category_id=data.get('category_id')
    )
    
    await message.answer(
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üì∏ <b>–§–æ—Ç–æ:</b> –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
        parse_mode='HTML'
    )
    
    await state.clear()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
@router.callback_query(F.data == "admin_all_orders", admin_filter)
async def admin_all_orders_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    orders = await db.get_all_orders(50)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–∫–∞–∑–æ–≤
    
    if not orders:
        text = "üìã <b>–í—Å–µ –∑–∞–∫–∞–∑—ã</b>\n\n–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=_("common.to_admin"), callback_data="admin_panel")]
                ]),
                parse_mode='HTML'
            )
        except Exception:
            await callback.message.delete()
            await callback.message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=_("common.to_admin"), callback_data="admin_panel")]
                ]),
                parse_mode='HTML'
            )
        return
    
    text = f"üìã <b>–í—Å–µ –∑–∞–∫–∞–∑—ã</b>\n\n–í—Å–µ–≥–æ: {len(orders)} –∑–∞–∫–∞–∑–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑:"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_orders_keyboard(orders),
            parse_mode='HTML'
        )
    except Exception:
        await callback.message.delete()
        await callback.message.answer(
            text,
            reply_markup=get_admin_orders_keyboard(orders),
            parse_mode='HTML'
        )

@router.callback_query(F.data == "admin_orders", admin_filter)
async def admin_orders_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    orders = await db.get_pending_orders()
    
    if not orders:
        await callback.message.edit_text(
            "üìã <b>–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n"
            "–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.",
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        return
    
    text = f"üìã <b>–ó–∞–∫–∞–∑—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è</b>\n\n–í—Å–µ–≥–æ: {len(orders)} –∑–∞–∫–∞–∑–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑:"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_orders_keyboard(orders),
            parse_mode='HTML'
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), 
        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.delete()
        await callback.message.answer(
            text,
            reply_markup=get_admin_orders_keyboard(orders),
            parse_mode='HTML'
        )

@router.callback_query(F.data.startswith("admin_order_"), admin_filter)
async def show_admin_order(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º order_id
    parts = callback.data.split("_")
    if parts[0] == "admin" and parts[1] == "order":
        order_id = int(parts[2])  # admin_order_X
    elif len(parts) >= 3:
        order_id = int(parts[-1])  # admin_confirm_payment_X, admin_ship_X, etc.
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã
    products = json.loads(order[2])
    user = await db.get_user(order[1])
    
    status_text = {
        'waiting_payment': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'payment_check': 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã',
        'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
        'shipping': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    }
    
    order_text = f"""üìã <b>–ó–∞–∫–∞–∑ #{order[1]}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {user[2] if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ Username: @{user[1] if user and user[1] else '–Ω–µ—Ç'}
‚Ä¢ ID: {order[2]}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for product in products:
        order_text += f"‚Ä¢ {product['name']} √ó {product['quantity']} = {product['price'] * product['quantity']}‚Çæ\n"
    
    zone_info = DELIVERY_ZONES.get(order[5], {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
    
    order_text += f"""
üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {zone_info['name']} - {order[6]}‚Çæ
üìç <b>–ê–¥—Ä–µ—Å:</b> {order[8]}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order[7]}
üìÖ <b>–î–∞—Ç–∞:</b> {str(order[11])[:16]}

üí∞ <b>–ò—Ç–æ–≥–æ: {order[4]}‚Çæ</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text.get(order[9], order[9])}"""
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if order[10]:  # payment_screenshot
        try:
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=order[10],
                caption=order_text,
                reply_markup=get_admin_order_actions_keyboard(order_id, order[9]),
                parse_mode='HTML'
            )
        except:
            await callback.message.edit_text(
                order_text + "\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω",
                reply_markup=get_admin_order_actions_keyboard(order_id, order[9]),
                parse_mode='HTML'
            )
    else:
        await callback.message.edit_text(
            order_text,
            reply_markup=get_admin_order_actions_keyboard(order_id, order[8]),
            parse_mode='HTML'
        )

# –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏
@router.callback_query(F.data.startswith("admin_confirm_payment_"), admin_filter)
async def confirm_payment(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[3])
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_order_status(order_id, 'paid')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await callback.message.bot.send_message(
            order[1],  # user_id
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
            f"–ì–æ—Ç–æ–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ! üì¶",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await show_admin_order(callback)

@router.callback_query(F.data.startswith("admin_reject_payment_"), admin_filter)
async def reject_payment(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[3])
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_order_status(order_id, 'waiting_payment')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await callback.message.bot.send_message(
            order[1],  # user_id
            f"‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id}: –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç.",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await show_admin_order(callback)

@router.callback_query(F.data.startswith("admin_ship_"), admin_filter)
async def ship_order(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π"""
    order_id = int(callback.data.split("_")[2])
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_order_status(order_id, 'shipping')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await callback.message.bot.send_message(
            order[1],  # user_id
            f"üöö <b>–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏!</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:\n"
            f"{order[7]}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞! üì¶",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer("üöö –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await show_admin_order(callback)

@router.callback_query(F.data.startswith("admin_deliver_"), admin_filter)
async def deliver_order(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π"""
    order_id = int(callback.data.split("_")[2])
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_order_status(order_id, 'delivered')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await callback.message.bot.send_message(
            order[1],  # user_id
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üôè\n\n"
            f"–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ—Ç–∑—ã–≤–æ–º!",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    await admin_orders_menu(callback)

@router.callback_query(F.data.startswith("admin_cancel_"), admin_filter)
async def cancel_order(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[2])
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_order_status(order_id, 'cancelled')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await callback.message.bot.send_message(
            order[1],  # user_id
            f"‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    await admin_orders_menu(callback)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "admin_stats", admin_filter)
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    all_orders = await db.fetchall("SELECT status FROM orders")
    users_count = (await db.fetchone("SELECT COUNT(*) FROM users"))[0]
    products_count = (await db.fetchone("SELECT COUNT(*) FROM products WHERE in_stock = true"))[0]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_counts = {
        'waiting_payment': 0,
        'payment_check': 0,
        'paid': 0,
        'shipping': 0,
        'delivered': 0,
        'cancelled': 0
    }
    
    for order in all_orders:
        status = order[0]
        if status in status_counts:
            status_counts[status] += 1
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥—ã
    delivered_orders = await db.fetchall("SELECT total_price FROM orders WHERE status = 'delivered'")
    total_revenue = sum(order[0] for order in delivered_orders)
    
    stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {users_count}
üì¶ <b>–¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:</b> {products_count}

üìã <b>–ó–∞–∫–∞–∑—ã:</b>
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: {status_counts['waiting_payment']}
üí∞ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {status_counts['payment_check']}
‚úÖ –û–ø–ª–∞—á–µ–Ω—ã: {status_counts['paid']}
üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {status_counts['shipping']}
‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω—ã: {status_counts['delivered']}
‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã: {status_counts['cancelled']}

üí∞ <b>–î–æ—Ö–æ–¥—ã:</b>
–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_revenue:.2f}‚Çæ"""

    await callback.message.edit_text(
        stats_text,
        reply_markup=get_admin_keyboard(),
        parse_mode='HTML'
    )

# –†–∞—Å—Å—ã–ª–∫–∞
@router.callback_query(F.data == "admin_broadcast", admin_filter)
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    keyboard = [
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_broadcast_message)

@router.message(AdminStates.waiting_broadcast_message, admin_filter)
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await db.fetchall("SELECT user_id FROM users")
    
    sent = 0
    failed = 0
    
    status_msg = await message.answer("üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    for user in users:
        try:
            await message.bot.send_message(user[0], broadcast_text)
            sent += 1
        except:
            failed += 1
    
    await status_msg.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
        parse_mode='HTML'
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@router.callback_query(F.data == "admin_categories", admin_filter)
async def show_admin_categories(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    await callback.message.edit_text(
        "üè∑Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_categories_keyboard(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "admin_add_category", admin_filter)
async def start_add_category(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = [
        [InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="admin_categories")]
    ]
    
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_category_name)

@router.message(AdminStates.waiting_category_name, admin_filter)
async def process_category_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_name = message.text
    await state.update_data(name=category_name)
    
    keyboard = [
        [InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="admin_categories")]
    ]
    
    await message.answer(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {category_name}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: üßö, üí®, üî•):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_category_emoji)

@router.message(AdminStates.waiting_category_emoji, admin_filter)
async def process_category_emoji(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    emoji = message.text
    await state.update_data(emoji=emoji)
    
    keyboard = [
        [InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="admin_categories")]
    ]
    
    await message.answer(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {emoji} {message.text}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.waiting_category_description)

@router.message(AdminStates.waiting_category_description, admin_filter)
async def process_category_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    description = message.text if message.text != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑—É
    await db.add_category(
        name=data['name'],
        emoji=data['emoji'],
        description=description
    )
    
    await message.answer(
        f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['emoji']} {data['name']}\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
        reply_markup=get_admin_categories_keyboard(),
        parse_mode='HTML'
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data.startswith("admin_change_status_"), admin_filter)
async def change_order_status_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[-1])
    
    await callback.message.edit_text(
        f"üîÑ <b>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=get_change_status_keyboard(order_id),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("set_status_"), admin_filter)  
async def set_order_status(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    parts = callback.data.split("_")
    new_status = "_".join(parts[2:-1])  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–∂–¥—É "set_status_" –∏ –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
    order_id = int(parts[-1])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_order_status(order_id, new_status)
    
    status_names = {
        "waiting_payment": "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
        "payment_check": "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã", 
        "paid": "–æ–ø–ª–∞—á–µ–Ω",
        "shipping": "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        "delivered": "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
        "cancelled": "–æ—Ç–º–µ–Ω–µ–Ω"
    }
    
    await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ \"{status_names.get(new_status, new_status)}\"")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–∫–∞–∑—É
    await show_admin_order(callback)



# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∞–º–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(F.text == "/antispam", admin_filter)
async def show_antispam_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º—ã"""
    blocked_count = len(anti_spam.get_blocked_users())
    total_users = len(anti_spam.user_stats)
    
    text = f"""üõ° <b>–ê–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_count}

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π/–º–∏–Ω: {anti_spam.MAX_MESSAGES_PER_MINUTE}
‚Ä¢ –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π/—á–∞—Å: {anti_spam.MAX_MESSAGES_PER_HOUR}
‚Ä¢ –ú–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª: {anti_spam.MIN_MESSAGE_INTERVAL}—Å
‚Ä¢ –ü–æ—Ä–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {anti_spam.SPAM_THRESHOLD}

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/blocked - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
/unblock [ID] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/stats [ID] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/block [ID] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "/blocked", admin_filter)
async def show_blocked_users(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    blocked = anti_spam.get_blocked_users()
    
    if not blocked:
        await message.answer("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return
    
    text = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
    
    for user in blocked[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        user_id = user["user_id"]
        spam_score = user["spam_score"]
        warnings = user["warning_count"]
        
        if user["permanent"]:
            status = "–ù–∞–≤—Å–µ–≥–¥–∞"
        else:
            remaining = user["remaining_time"]
            status = f"{remaining}—Å" if remaining > 0 else "–ò—Å—Ç–µ–∫–∞–µ—Ç"
        
        text += f"‚Ä¢ ID: {user_id}\n"
        text += f"  –°–ø–∞–º-—Å—á–µ—Ç: {spam_score}, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings}\n"
        text += f"  –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {status}\n\n"
    
    if len(blocked) > 10:
        text += f"... –∏ –µ—â–µ {len(blocked) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await message.answer(text, parse_mode="HTML")

@router.message(F.text.startswith("/unblock "), admin_filter)
async def unblock_user_command(message: Message):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text.split()[1])
        anti_spam.unblock_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")

@router.message(F.text.startswith("/block "), admin_filter)
async def block_user_command(message: Message):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text.split()[1])
        anti_spam.block_user(user_id, 0, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")

@router.message(F.text.startswith("/stats "), admin_filter)
async def show_user_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text.split()[1])
        stats = anti_spam.get_user_stats(user_id)
        
        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:</b>

üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: {stats["message_count"]}
üïê –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {stats["messages_last_hour"]}
üéØ –°–ø–∞–º-—Å—á–µ—Ç: {stats["spam_score"]}
‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats["warning_count"]}

üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {"–î–∞" if stats["is_blocked"] else "–ù–µ—Ç"}"""
        
        if stats["remaining_block_time"] > 0:
            text += f"\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {stats['remaining_block_time']}—Å"
        
        await message.answer(text, parse_mode="HTML")
        
    except (ValueError, IndexError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")

@router.message(F.text == "/security", admin_filter)
async def show_security_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        from security_monitor import security_monitor
        stats = security_monitor.get_security_stats()
        
        text = f"""üõ°Ô∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>

üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:</b>
‚Ä¢ –°–æ–±—ã—Ç–∏—è: {stats["events_last_hour"]}
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {stats["blocks_last_hour"]}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: {stats["messages_last_hour"]}

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats["total_events"]}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats["unique_blocked_users"]}

‚ö†Ô∏è <b>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π:</b>
‚Ä¢ –ù–∏–∑–∫–∞—è: {stats["severity_breakdown"]["low"]}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {stats["severity_breakdown"]["medium"]}
‚Ä¢ –í—ã—Å–æ–∫–∞—è: {stats["severity_breakdown"]["high"]}
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è: {stats["severity_breakdown"]["critical"]}

–ö–æ–º–∞–Ω–¥—ã:
/events - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
/ddos - –ø—Ä–æ–≤–µ—Ä–∫–∞ DDoS
/cleanup - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@router.message(F.text == "/events", admin_filter)
async def show_recent_events(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        from security_monitor import security_monitor
        events = security_monitor.get_recent_events(10)
        
        if not events:
            await message.answer("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        
        text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n\n"
        
        for event in reversed(events[-10:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
            severity_emoji = {
                "low": "üü¢",
                "medium": "üü°", 
                "high": "üü†",
                "critical": "üî¥"
            }
            
            time_str = time.strftime("%H:%M:%S", time.localtime(event.timestamp))
            text += f"{severity_emoji.get(event.severity, '‚ö™')} <code>{time_str}</code> "
            text += f"<b>{event.event_type}</b>\n"
            text += f"üë§ User: {event.user_id}\n"
            text += f"üìù {event.details}\n\n"
        
        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@router.message(F.text == "/ddos", admin_filter)
async def check_ddos(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç DDoS"""
    try:
        from security_monitor import security_monitor
        is_ddos = security_monitor.detect_ddos_attempt()
        
        if is_ddos:
            text = "üö® <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\n"
            text += "–í–æ–∑–º–æ–∂–Ω–∞—è DDoS –∞—Ç–∞–∫–∞ –∏–ª–∏ –º–∞—Å—Å–æ–≤—ã–π —Å–ø–∞–º.\n"
            text += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É."
        else:
            text = "‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ –≤ –Ω–æ—Ä–º–µ</b>\n\n"
            text += "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@router.message(F.text == "/cleanup", admin_filter) 
async def cleanup_security_data(message: Message):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        from security_monitor import security_monitor
        security_monitor.cleanup_old_data()
        await message.answer("‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@router.message(F.text == "/topblocked", admin_filter)
async def show_top_blocked(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from security_monitor import security_monitor
        top_users = security_monitor.get_top_blocked_users(10)
        
        if not top_users:
            await message.answer("üìã –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        text = "üìä <b>–¢–æ–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        
        for i, user_data in enumerate(top_users, 1):
            text += f"{i}. üë§ ID: <code>{user_data['user_id']}</code>\n"
            text += f"   üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {user_data['block_count']}\n\n"
        
        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data.startswith("quick_confirm_"), admin_filter)
async def quick_confirm_payment(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    order_id = int(callback.data.split("_")[2])
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
    await db.update_order_status(order_id, 'paid')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    order = await db.get_order(order_id)
    if order:
        client_text = f"""‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>

üìã <b>–ó–∞–∫–∞–∑ #{order[1]}</b>
üí∞ <b>–°—É–º–º–∞:</b> {order[3]}‚Çæ

–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"""
        
        try:
            await callback.bot.send_message(
                order[1],  # user_id
                client_text,
                parse_mode='HTML'
            )
        except:
            pass
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await callback.message.edit_caption(
        caption=callback.message.caption + "\n\n‚úÖ <b>–û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê</b>",
        parse_mode='HTML'
    )
    await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

@router.callback_query(F.data.startswith("quick_reject_"), admin_filter)
async def quick_reject_payment(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    order_id = int(callback.data.split("_")[2])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    await db.update_order_status(order_id, 'waiting_payment')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    order = await db.get_order(order_id)
    if order:
        client_text = f"""‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>

üìã <b>–ó–∞–∫–∞–∑ #{order[1]}</b>
üí∞ <b>–°—É–º–º–∞:</b> {order[3]}‚Çæ

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç.
–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."""
        
        try:
            await callback.bot.send_message(
                order[1],  # user_id
                client_text,
                parse_mode='HTML'
            )
        except:
            pass
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await callback.message.edit_caption(
        caption=callback.message.caption + "\n\n‚ùå <b>–û–ü–õ–ê–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê</b>",
        parse_mode='HTML'
    )
    await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data.startswith("admin_orders_"), admin_filter)
async def show_filtered_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    filter_type = callback.data.split("_")[2]  # new, checking, paid, etc.
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
    if filter_type == "new":
        orders = await db.get_new_orders()
        title = "üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"
    elif filter_type == "checking":
        orders = await db.get_checking_orders()
        title = "üí∞ –ó–∞–∫–∞–∑—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"
    elif filter_type == "paid":
        orders = await db.get_paid_orders()
        title = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"
    elif filter_type == "shipping":
        orders = await db.get_shipping_orders()
        title = "üöö –ó–∞–∫–∞–∑—ã –≤ –¥–æ—Å—Ç–∞–≤–∫–µ"
    elif filter_type == "delivered":
        orders = await db.get_delivered_orders()
        title = "üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"
    elif filter_type == "cancelled":
        orders = await db.get_cancelled_orders()
        title = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"
    else:
        orders = await db.get_all_orders()
        title = "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã"
    
    if not orders:
        await callback.message.edit_text(
            f"{title}\n\n–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=callback.data)],
                [InlineKeyboardButton(text=_("common.to_admin"), callback_data="admin_panel")]
            ]),
            parse_mode='HTML'
        )
        return
    
    text = f"<b>{title}</b>\n\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
    for order in orders[:10]:
        status_emoji = {
            'waiting_payment': '‚è≥',
            'payment_check': 'üí∞',
            'paid': '‚úÖ',
            'shipping': 'üöö',
            'delivered': 'üì¶',
            'cancelled': '‚ùå'
        }
        
        emoji = status_emoji.get(order[9], '‚ùì')
        text += f"{emoji} –ó–∞–∫–∞–∑ #{order[1]} - {order[4]}‚Çæ\n"
        text += f"   {str(order[11])[:16]} - ID: {order[2]}\n\n"
    
    if len(orders) > 10:
        text += f"... –∏ –µ—â–µ {len(orders) - 10} –∑–∞–∫–∞–∑–æ–≤"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    keyboard = []
    for order in orders[:10]:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üìã –ó–∞–∫–∞–∑ #{order[1]}",
                callback_data=f"admin_order_{order[0]}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=callback.data)])
    keyboard.append([InlineKeyboardButton(text=_("common.to_admin"), callback_data="admin_panel")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

