"""
–ê–¥–º–∏–Ω –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤–∫—É—Å–æ–≤
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from filters.admin import admin_filter
from i18n import _
from utils.safe_operations import safe_edit_message

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∫—É—Å–∞–º–∏
class FlavorStates(StatesGroup):
    waiting_flavor_name = State()
    waiting_flavor_emoji = State()
    waiting_flavor_description = State()
    editing_flavor_name = State()
    editing_flavor_emoji = State()
    editing_flavor_description = State()

@router.callback_query(F.data == "admin_flavors", admin_filter)
async def show_flavor_management(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤–∫—É—Å–æ–≤"""
    await state.clear()
    
    flavor_categories = await db.get_flavor_categories()
    
    text = "üçì <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤–∫—É—Å–æ–≤</b>\n\n"
    
    if flavor_categories:
        text += f"üìã –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(flavor_categories)}\n\n"
        for flavor in flavor_categories:
            products_count = len(await db.get_products_by_flavor(flavor.id))
            text += f"{flavor.emoji} <b>{flavor.name}</b> ({products_count} —Ç–æ–≤–∞—Ä–æ–≤)\n"
    else:
        text += "üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫—É—Å–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"
    
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_flavor")],
        [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="manage_flavors")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "add_flavor", admin_filter)
async def add_flavor_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫—É—Å–∞"""
    text = "üçì <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫—É—Å–∞</b>\n\n" \
           "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—Ä—É–∫—Ç–æ–≤—ã–µ):"
    
    keyboard = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_flavors")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await state.set_state(FlavorStates.waiting_flavor_name)

@router.message(FlavorStates.waiting_flavor_name)
async def add_flavor_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫—É—Å–∞"""
    if len(message.text) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(name=message.text)
    
    text = f"üçì <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {message.text}</b>\n\n" \
           "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: üçì, ‚ùÑÔ∏è, üçä):"
    
    keyboard = [
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_flavor_emoji")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_flavors")]
    ]
    
    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await state.set_state(FlavorStates.waiting_flavor_emoji)

@router.message(FlavorStates.waiting_flavor_emoji)
async def add_flavor_emoji(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫—É—Å–∞"""
    if len(message.text) > 10:
        await message.answer("‚ùå –≠–º–æ–¥–∑–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(emoji=message.text)
    
    data = await state.get_data()
    text = f"üçì <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {data['name']}</b>\n" \
           f"–≠–º–æ–¥–∑–∏: {message.text}\n\n" \
           "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"
    
    keyboard = [
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_flavor_description")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_flavors")]
    ]
    
    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await state.set_state(FlavorStates.waiting_flavor_description)

@router.callback_query(F.data == "skip_flavor_emoji", admin_filter)
async def skip_flavor_emoji(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç–º–æ–¥–∑–∏"""
    await state.update_data(emoji='')
    
    data = await state.get_data()
    text = f"üçì <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {data['name']}</b>\n\n" \
           "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"
    
    keyboard = [
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_flavor_description")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_flavors")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await state.set_state(FlavorStates.waiting_flavor_description)

@router.message(FlavorStates.waiting_flavor_description)
async def add_flavor_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    await state.update_data(description=message.text)
    await finish_adding_flavor(message, state)

@router.callback_query(F.data == "skip_flavor_description", admin_filter)
async def skip_flavor_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    await state.update_data(description='')
    await finish_adding_flavor(callback.message, state, is_callback=True)

async def finish_adding_flavor(message, state: FSMContext, is_callback=False):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫—É—Å–∞"""
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ë–î
        category_id = await db.add_flavor_category(
            name=data['name'],
            emoji=data.get('emoji', ''),
            description=data.get('description', '')
        )
        
        text = f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n" \
               f"{data.get('emoji', 'üçÉ')} <b>{data['name']}</b>\n" \
               f"ID: {category_id}\n"
        
        if data.get('description'):
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        
        keyboard = [
            [InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∫—É—Å–∞–º–∏", callback_data="admin_flavors")]
        ]
        
        if is_callback:
            await message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
        
        await state.clear()
        
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"
        keyboard = [
            [InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∫—É—Å–∞–º–∏", callback_data="admin_flavors")]
        ]
        
        if is_callback:
            await message.edit_text(
                error_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            await message.answer(
                error_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        await state.clear()

@router.callback_query(F.data == "manage_flavors", admin_filter)
async def manage_flavors_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    await state.clear()
    
    flavor_categories = await db.get_flavor_categories()
    
    if not flavor_categories:
        text = "üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫—É—Å–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã\n\n" \
               "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!"
        keyboard = [
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_flavor")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_flavors")]
        ]
    else:
        text = "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
        
        keyboard = []
        for flavor in flavor_categories:
            products_count = len(await db.get_products_by_flavor(flavor.id))
            button_text = f"{flavor.emoji} {flavor.name} ({products_count} —Ç–æ–≤–∞—Ä–æ–≤)"
            keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"edit_flavor_{flavor.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_flavors")])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("edit_flavor_"), admin_filter)
async def edit_flavor_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫—É—Å–∞"""
    flavor_id = int(callback.data.split("_")[2])
    flavor = await db.get_flavor_category(flavor_id)
    
    if not flavor:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    products_count = len(await db.get_products_by_flavor(flavor_id))
    
    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n" \
           f"{flavor.emoji} <b>{flavor.name}</b>\n" \
           f"ID: {flavor.id}\n" \
           f"–¢–æ–≤–∞—Ä–æ–≤: {products_count}\n"
    
    if flavor.description:
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {flavor.description}\n"
    
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_flavor_name_{flavor_id}")],
        [InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏", callback_data=f"edit_flavor_emoji_{flavor_id}")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_flavor_desc_{flavor_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"delete_flavor_{flavor_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_flavors")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("delete_flavor_"), admin_filter)
async def confirm_delete_flavor(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    flavor_id = int(callback.data.split("_")[2])
    flavor = await db.get_flavor_category(flavor_id)
    
    if not flavor:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    products_count = len(await db.get_products_by_flavor(flavor_id))
    
    text = f"‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n" \
           f"{flavor.emoji} <b>{flavor.name}</b>\n"
    
    if products_count > 0:
        text += f"\n‚ùó –£ {products_count} —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!\n"
    
    text += "\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?"
    
    keyboard = [
        [InlineKeyboardButton(text="üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_flavor_{flavor_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_flavor_{flavor_id}")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("confirm_delete_flavor_"), admin_filter)
async def delete_flavor_confirmed(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∫—É—Å–∞"""
    flavor_id = int(callback.data.split("_")[3])
    
    try:
        flavor = await db.get_flavor_category(flavor_id)
        if flavor:
            await db.delete_flavor_category(flavor_id)
            
            text = f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞</b>\n\n" \
                   f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{flavor.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
        else:
            text = "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}"
    
    keyboard = [
        [InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∫—É—Å–∞–º–∏", callback_data="admin_flavors")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )