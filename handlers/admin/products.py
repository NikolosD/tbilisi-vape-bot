from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_IDS
from database import db
from filters.admin import admin_filter
from keyboards import get_admin_products_keyboard, get_category_selection_keyboard
from i18n import _

router = Router()

class ProductStates(StatesGroup):
    waiting_product_name = State()
    waiting_product_price = State()
    waiting_product_description = State()
    waiting_product_quantity = State()
    waiting_product_photo = State()
    waiting_quantity_input = State()

@router.callback_query(F.data == "admin_products", admin_filter)
async def admin_products_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    products = await db.get_all_products()
    
    await callback.message.edit_text(
        f"üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
        f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}",
        reply_markup=get_admin_products_keyboard(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "admin_edit_products", admin_filter)
async def admin_edit_products(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    products = await db.get_all_products()
    
    if not products:
        await callback.message.edit_text(
            "üì¶ <b>–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=get_admin_products_keyboard(),
            parse_mode='HTML'
        )
        return
    
    keyboard = []
    for product in products:
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚úèÔ∏è {product.name} - {product.price}‚Çæ",
                callback_data=f"edit_product_{product.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")])
    
    await callback.message.edit_text(
        "üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("edit_product_"), admin_filter)
async def edit_product_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer(_("common.not_found", user_id=callback.from_user.id), show_alert=True)
        return
    
    keyboard = [
        [InlineKeyboardButton(text="üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"edit_quantity_{product_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_product_{product_id}")],
        [InlineKeyboardButton(text="üì¶ –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"toggle_stock_{product_id}")],
        [InlineKeyboardButton(text="üîô –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_edit_products")]
    ]
    
    stock_status = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if product.in_stock else "‚ùå –°–∫—Ä—ã—Ç"
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product.price}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {product.stock_quantity} —à—Ç.\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {stock_status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("edit_quantity_"), admin_filter)
async def edit_product_quantity(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer(_("common.not_found", user_id=callback.from_user.id), show_alert=True)
        return
    
    await state.set_state(ProductStates.waiting_quantity_input)
    await state.update_data(product_id=product_id)
    
    await callback.message.edit_text(
        f"üì¶ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞</b>\n\n"
        f"üìù <b>–¢–æ–≤–∞—Ä:</b> {product.name}\n"
        f"üìä <b>–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {product.stock_quantity} —à—Ç.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (0-999):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")]
        ]),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("delete_product_"), admin_filter)
async def confirm_delete_product(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{product_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")]
    ]
    
    await callback.message.edit_text(
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("confirm_delete_"), admin_filter)
async def delete_product(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    
    await db.execute("DELETE FROM products WHERE id = $1", product_id)
    
    await callback.message.edit_text(
        "‚úÖ <b>–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!</b>\n\n"
        "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")]
        ]),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("toggle_stock_"), admin_filter)
async def toggle_product_stock(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer(_("common.not_found", user_id=callback.from_user.id), show_alert=True)
        return
    
    new_stock = not product.in_stock
    await db.update_product_stock(product_id, new_stock)
    
    status_text = "–ø–æ–∫–∞–∑–∞–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ" if new_stock else "—Å–∫—Ä—ã—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"
    
    await callback.answer(f"‚úÖ –¢–æ–≤–∞—Ä {status_text}!", show_alert=True)
    
    keyboard = [
        [InlineKeyboardButton(text="üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"edit_quantity_{product_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_product_{product_id}")],
        [InlineKeyboardButton(text="üì¶ –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"toggle_stock_{product_id}")],
        [InlineKeyboardButton(text="üîô –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_edit_products")]
    ]
    
    stock_status = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if new_stock else "‚ùå –°–∫—Ä—ã—Ç"
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product.price}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {product.stock_quantity} —à—Ç.\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {stock_status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "admin_add_product", admin_filter)
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await db.get_categories()
    
    if not categories:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=get_category_selection_keyboard(categories),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("select_category_"), admin_filter)
async def select_category_for_product(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    category_id = int(callback.data.split("_")[2])
    category = await db.get_category(category_id)
    
    await state.update_data(category_id=category_id)
    
    keyboard = [
        [InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")]
    ]
    
    await callback.message.edit_text(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category[2]} {category[1]}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode='HTML'
    )
    await state.set_state(ProductStates.waiting_product_name)

@router.message(ProductStates.waiting_product_name, admin_filter)
async def process_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product_name = message.text
    await state.update_data(name=product_name)
    
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ –ª–∞—Ä–∏):",
        parse_mode='HTML'
    )
    await state.set_state(ProductStates.waiting_product_price)

@router.message(ProductStates.waiting_product_price, admin_filter)
async def process_product_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
        return
    
    data = await state.get_data()
    await state.update_data(price=price)
    
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}‚Çæ\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        parse_mode='HTML'
    )
    await state.set_state(ProductStates.waiting_product_description)

@router.message(ProductStates.waiting_product_description, admin_filter)
async def process_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    description = message.text
    data = await state.get_data()
    await state.update_data(description=description)
    
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
        f"üì¶ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (1-999):</b>",
        parse_mode='HTML'
    )
    await state.set_state(ProductStates.waiting_product_quantity)

@router.message(ProductStates.waiting_product_quantity, admin_filter)
async def process_product_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        quantity = int(message.text.strip())
        if quantity < 1 or quantity > 999:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999\n\nüì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:",
                parse_mode='HTML'
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999\n\nüì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='HTML'
        )
        return
    
    data = await state.get_data()
    await state.update_data(stock_quantity=quantity)
    
    await message.answer(
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –±–µ–∑ —Ñ–æ—Ç–æ):",
        parse_mode='HTML'
    )
    await state.set_state(ProductStates.waiting_product_photo)

@router.message(ProductStates.waiting_product_photo, F.content_type == 'photo', admin_filter)
async def process_product_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    photo_file_id = message.photo[-1].file_id
    data = await state.get_data()
    
    await db.add_product(
        name=data['name'],
        price=data['price'],
        description=data['description'],
        photo=photo_file_id,
        category_id=data.get('category_id'),
        stock_quantity=data.get('stock_quantity', 1)
    )
    
    await message.answer(
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {data.get('stock_quantity', 1)} —à—Ç.\n"
        f"üì∏ <b>–§–æ—Ç–æ:</b> –î–æ–±–∞–≤–ª–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
            [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")],
            [InlineKeyboardButton(text="üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]),
        parse_mode='HTML'
    )
    
    await state.clear()

@router.message(ProductStates.waiting_product_photo, F.text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", admin_filter)
async def process_product_no_photo(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    
    await db.add_product(
        name=data['name'],
        price=data['price'],
        description=data['description'],
        photo=None,
        category_id=data.get('category_id'),
        stock_quantity=data.get('stock_quantity', 1)
    )
    
    await message.answer(
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']}‚Çæ\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {data.get('stock_quantity', 1)} —à—Ç.\n"
        f"üì∏ <b>–§–æ—Ç–æ:</b> –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
            [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")],
            [InlineKeyboardButton(text="üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]),
        parse_mode='HTML'
    )
    
    await state.clear()

@router.message(ProductStates.waiting_quantity_input, admin_filter)
async def process_quantity_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        quantity = int(message.text.strip())
        if quantity < 0 or quantity > 999:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 999\n\nüì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                parse_mode='HTML'
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 999\n\nüì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
            parse_mode='HTML'
        )
        return
    
    data = await state.get_data()
    product_id = data.get('product_id')
    
    await db.execute("UPDATE products SET stock_quantity = $1 WHERE id = $2", quantity, product_id)
    
    product = await db.get_product(product_id)
    
    await message.answer(
        f"‚úÖ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
        f"üìù <b>–¢–æ–≤–∞—Ä:</b> {product.name}\n"
        f"üì¶ <b>–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_product_{product_id}")],
            [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")]
        ]),
        parse_mode='HTML'
    )
    
    await state.clear()