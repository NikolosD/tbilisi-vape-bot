from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
import time

from config import ADMIN_IDS
from database import db
from filters.admin import admin_filter

router = Router()

@router.message(F.text == "/antispam", admin_filter)
async def show_antispam_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from anti_spam import anti_spam
        blocked_count = len(anti_spam.get_blocked_users())
        total_users = len(anti_spam.user_stats)
        
        text = f"""üõ° <b>–ê–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_count}

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π/–º–∏–Ω: {anti_spam.MAX_MESSAGES_PER_MINUTE}
‚Ä¢ –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π/—á–∞—Å: {anti_spam.MAX_MESSAGES_PER_HOUR}
‚Ä¢ –ú–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª: {anti_spam.MIN_MESSAGE_INTERVAL}—Å
‚Ä¢ –ü–æ—Ä–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {anti_spam.SPAM_THRESHOLD}

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/blocked - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
/unblock [ID] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/stats [ID] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/block [ID] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω—Ç–∏-—Å–ø–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@router.message(F.text == "/blocked", admin_filter)
async def show_blocked_users(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from anti_spam import anti_spam
        blocked = anti_spam.get_blocked_users()
        
        if not blocked:
            await message.answer("‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
            return
        
        text = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        
        for user in blocked[:10]:
            user_id = user["user_id"]
            spam_score = user["spam_score"]
            warnings = user["warning_count"]
            
            if user["permanent"]:
                status = "–ù–∞–≤—Å–µ–≥–¥–∞"
            else:
                remaining = user["remaining_time"]
                status = f"{remaining}—Å" if remaining > 0 else "–ò—Å—Ç–µ–∫–∞–µ—Ç"
            
            text += f"‚Ä¢ ID: {user_id}\n"
            text += f"  –°–ø–∞–º-—Å—á–µ—Ç: {spam_score}, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings}\n"
            text += f"  –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {status}\n\n"
        
        if len(blocked) > 10:
            text += f"... –∏ –µ—â–µ {len(blocked) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω—Ç–∏-—Å–ø–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@router.message(F.text.startswith("/unblock "), admin_filter)
async def unblock_user_command(message: Message):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from anti_spam import anti_spam
        user_id = int(message.text.split()[1])
        anti_spam.unblock_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω—Ç–∏-—Å–ø–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")

@router.message(F.text.startswith("/block "), admin_filter)
async def block_user_command(message: Message):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from anti_spam import anti_spam
        user_id = int(message.text.split()[1])
        anti_spam.block_user(user_id, 0, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω—Ç–∏-—Å–ø–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")

@router.message(F.text.startswith("/stats "), admin_filter)
async def show_user_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from anti_spam import anti_spam
        user_id = int(message.text.split()[1])
        stats = anti_spam.get_user_stats(user_id)
        
        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:</b>

üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: {stats["message_count"]}
üïê –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {stats["messages_last_hour"]}
üéØ –°–ø–∞–º-—Å—á–µ—Ç: {stats["spam_score"]}
‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats["warning_count"]}

üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {"–î–∞" if stats["is_blocked"] else "–ù–µ—Ç"}"""
        
        if stats["remaining_block_time"] > 0:
            text += f"\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {stats['remaining_block_time']}—Å"
        
        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω—Ç–∏-—Å–ø–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")

@router.message(F.text == "/security", admin_filter)
async def show_security_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        from security_monitor import security_monitor
        stats = security_monitor.get_security_stats()
        
        text = f"""üõ°Ô∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>

üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:</b>
‚Ä¢ –°–æ–±—ã—Ç–∏—è: {stats["events_last_hour"]}
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {stats["blocks_last_hour"]}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: {stats["messages_last_hour"]}

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats["total_events"]}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats["unique_blocked_users"]}

‚ö†Ô∏è <b>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π:</b>
‚Ä¢ –ù–∏–∑–∫–∞—è: {stats["severity_breakdown"]["low"]}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {stats["severity_breakdown"]["medium"]}
‚Ä¢ –í—ã—Å–æ–∫–∞—è: {stats["severity_breakdown"]["high"]}
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è: {stats["severity_breakdown"]["critical"]}

–ö–æ–º–∞–Ω–¥—ã:
/events - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
/ddos - –ø—Ä–æ–≤–µ—Ä–∫–∞ DDoS
/cleanup - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@router.message(F.text == "/events", admin_filter)
async def show_recent_events(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        from security_monitor import security_monitor
        events = security_monitor.get_recent_events(10)
        
        if not events:
            await message.answer("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        
        text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n\n"
        
        for event in reversed(events[-10:]):
            severity_emoji = {
                "low": "üü¢",
                "medium": "üü°", 
                "high": "üü†",
                "critical": "üî¥"
            }
            
            time_str = time.strftime("%H:%M:%S", time.localtime(event.timestamp))
            text += f"{severity_emoji.get(event.severity, '‚ö™')} <code>{time_str}</code> "
            text += f"<b>{event.event_type}</b>\n"
            text += f"üë§ User: {event.user_id}\n"
            text += f"üìù {event.details}\n\n"
        
        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@router.message(F.text == "/ddos", admin_filter)
async def check_ddos(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç DDoS"""
    try:
        from security_monitor import security_monitor
        is_ddos = security_monitor.detect_ddos_attempt()
        
        if is_ddos:
            text = "üö® <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\n"
            text += "–í–æ–∑–º–æ–∂–Ω–∞—è DDoS –∞—Ç–∞–∫–∞ –∏–ª–∏ –º–∞—Å—Å–æ–≤—ã–π —Å–ø–∞–º.\n"
            text += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É."
        else:
            text = "‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ –≤ –Ω–æ—Ä–º–µ</b>\n\n"
            text += "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@router.message(F.text == "/cleanup", admin_filter) 
async def cleanup_security_data(message: Message):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        from security_monitor import security_monitor
        security_monitor.cleanup_old_data()
        await message.answer("‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@router.message(F.text == "/topblocked", admin_filter)
async def show_top_blocked(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from security_monitor import security_monitor
        top_users = security_monitor.get_top_blocked_users(10)
        
        if not top_users:
            await message.answer("üìã –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        text = "üìä <b>–¢–æ–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        
        for i, user_data in enumerate(top_users, 1):
            text += f"{i}. üë§ ID: <code>{user_data['user_id']}</code>\n"
            text += f"   üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {user_data['block_count']}\n\n"
        
        await message.answer(text, parse_mode="HTML")
    except ImportError:
        await message.answer("‚ùå –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")