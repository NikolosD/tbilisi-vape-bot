from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Contact
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
import logging

from database import db
from config import DELIVERY_ZONES, MIN_ORDER_AMOUNT, PAYMENT_INFO, ADMIN_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
from keyboards import (
    get_main_menu, get_catalog_keyboard, get_product_card_keyboard,
    get_cart_keyboard, get_delivery_zones_keyboard, get_order_confirmation_keyboard,
    get_orders_keyboard, get_order_details_keyboard, get_contact_keyboard
)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_contact = State()
    waiting_address = State()
    waiting_payment_screenshot = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    products = await db.get_products()
    
    if not products:
        await message.answer("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º —Ç–æ–≤–∞—Ä—ã!")
        return
    
    await message.answer(
        "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_catalog_keyboard(products),
        parse_mode='HTML'
    )

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = message.from_user.id
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        await message.answer(
            "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            parse_mode='HTML'
        )
        return
    
    total = sum(item[1] * item[3] for item in cart_items)  # quantity * price
    
    cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for item in cart_items:
        product_id, quantity, name, price, photo = item
        cart_text += f"‚Ä¢ {name}\n"
        cart_text += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        cart_text += f"  –¶–µ–Ω–∞: {price}‚Çæ √ó {quantity} = {price * quantity}‚Çæ\n\n"
    
    cart_text += f"üí∞ <b>–ò—Ç–æ–≥–æ: {total}‚Çæ</b>"
    
    await message.answer(
        cart_text,
        reply_markup=get_cart_keyboard(cart_items),
        parse_mode='HTML'
    )

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_orders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    orders = await db.get_user_orders(user_id)
    
    if not orders:
        await message.answer(
            "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</b>\n\n–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            parse_mode='HTML'
        )
        return
    
    await message.answer(
        "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=get_orders_keyboard(orders),
        parse_mode='HTML'
    )

@router.message(F.text == "üí¨ –°–≤—è–∑—å")
async def show_contact(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    contact_text = """üí¨ <b>–°–≤—è–∑—å —Å –Ω–∞–º–∏</b>

üì± <b>Telegram:</b> @your_support_username
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +995 555 123 456
üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> 10:00 - 22:00

‚ùì <b>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
‚Ä¢ –ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∂–∞–ª–æ–±—ã

‚ö° <b>–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!</b>"""

    await message.answer(contact_text, parse_mode='HTML')

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def show_info(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    info_text = """‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ</b>

üè™ <b>Tbilisi VAPE Shop</b>
üá¨üá™ –õ—É—á—à–∏–π –º–∞–≥–∞–∑–∏–Ω –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö —Å–∏–≥–∞—Ä–µ—Ç –≤ –¢–±–∏–ª–∏—Å–∏

‚úÖ <b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ 100% –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –¢–±–∏–ª–∏—Å–∏
‚Ä¢ –ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –≤–∫—É—Å–æ–≤
‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞

üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>
‚Ä¢ –¶–µ–Ω—Ç—Ä - 5‚Çæ (30-60 –º–∏–Ω)
‚Ä¢ –°–∞–±—É—Ä—Ç–∞–ª–æ - 8‚Çæ (45-90 –º–∏–Ω)
‚Ä¢ –í–∞–∫–µ - 7‚Çæ (40-80 –º–∏–Ω)
‚Ä¢ –ò—Å–∞–Ω–∏ - 10‚Çæ (60-120 –º–∏–Ω)
‚Ä¢ –î—Ä—É–≥–∏–µ —Ä–∞–π–æ–Ω—ã - 15‚Çæ (60-180 –º–∏–Ω)

üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ –°–ë–ü (–±—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏)
‚Ä¢ –ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏

üì¶ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {MIN_ORDER_AMOUNT}‚Çæ

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã. –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç."""

    await message.answer(info_text.format(MIN_ORDER_AMOUNT=MIN_ORDER_AMOUNT), parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤

@router.callback_query(F.data == "catalog")
async def callback_catalog(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ callback"""
    products = await db.get_products()
    
    if not products:
        await callback.message.edit_text("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º —Ç–æ–≤–∞—Ä—ã!")
        return
    
    await callback.message.edit_text(
        "üõç <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_catalog_keyboard(products),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[1])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    user_id = callback.from_user.id
    cart_items = await db.get_cart(user_id)
    in_cart = any(item[0] == product_id for item in cart_items)
    
    product_text = f"""üõç <b>{product[1]}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {product[2]}‚Çæ

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{product[3] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

{'üõí <i>–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ</i>' if in_cart else ''}"""
    
    keyboard = get_product_card_keyboard(product_id, in_cart)
    
    if product[4]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
            await callback.message.delete()
            await callback.bot.send_photo(
                chat_id=callback.from_user.id,
                photo=product[4],
                caption=product_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                product_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
    else:
        await callback.message.edit_text(
            product_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    product = await db.get_product(product_id)
    if not product or product[6] == 0:  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", show_alert=True)
        return
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    user = await db.get_user(user_id)
    if not user:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await db.add_user(
            user_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    await db.add_to_cart(user_id, product_id, 1)
    
    await callback.answer(f"‚úÖ {product[1]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = get_product_card_keyboard(product_id, in_cart=True)
    await callback.message.edit_reply_markup(reply_markup=keyboard)

@router.callback_query(F.data.startswith("cart_increase_"))
async def cart_increase(callback: CallbackQuery):
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    cart_items = await db.get_cart(user_id)
    current_quantity = 0
    for item in cart_items:
        if item[0] == product_id:
            current_quantity = item[1]
            break
    
    new_quantity = current_quantity + 1
    await db.update_cart_quantity(user_id, product_id, new_quantity)
    
    await callback.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {new_quantity}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã
    if "cart" in callback.message.text:
        await update_cart_display(callback)

@router.callback_query(F.data.startswith("cart_decrease_"))
async def cart_decrease(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    cart_items = await db.get_cart(user_id)
    current_quantity = 0
    for item in cart_items:
        if item[0] == product_id:
            current_quantity = item[1]
            break
    
    if current_quantity <= 1:
        await db.remove_from_cart(user_id, product_id)
        await callback.answer("üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    else:
        new_quantity = current_quantity - 1
        await db.update_cart_quantity(user_id, product_id, new_quantity)
        await callback.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {new_quantity}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã
    if "cart" in callback.message.text:
        await update_cart_display(callback)

@router.callback_query(F.data.startswith("cart_remove_"))
async def cart_remove(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    product = await db.get_product(product_id)
    db.remove_from_cart(user_id, product_id)
    
    await callback.answer(f"üóë {product[1]} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã
    if "cart" in callback.message.text:
        await update_cart_display(callback)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
        keyboard = get_product_card_keyboard(product_id, in_cart=False)
        await callback.message.edit_reply_markup(reply_markup=keyboard)

async def update_cart_display(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = callback.from_user.id
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        await callback.message.edit_text(
            "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            parse_mode='HTML'
        )
        return
    
    total = sum(item[1] * item[3] for item in cart_items)
    
    cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for item in cart_items:
        product_id, quantity, name, price, photo = item
        cart_text += f"‚Ä¢ {name}\n"
        cart_text += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        cart_text += f"  –¶–µ–Ω–∞: {price}‚Çæ √ó {quantity} = {price * quantity}‚Çæ\n\n"
    
    cart_text += f"üí∞ <b>–ò—Ç–æ–≥–æ: {total}‚Çæ</b>"
    
    await callback.message.edit_text(
        cart_text,
        reply_markup=get_cart_keyboard(cart_items),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = callback.from_user.id
    await db.clear_cart(user_id)
    
    await callback.message.edit_text(
        "üóë <b>–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
        parse_mode='HTML'
    )

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_id = callback.from_user.id
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return
    
    total = sum(item[1] * item[3] for item in cart_items)
    
    if total < MIN_ORDER_AMOUNT:
        await callback.answer(
            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {MIN_ORDER_AMOUNT}‚Çæ",
            show_alert=True
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    await callback.message.edit_text(
        f"üöö <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\nüí∞ –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: {total}‚Çæ",
        reply_markup=get_delivery_zones_keyboard(),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("delivery_"))
async def select_delivery(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏"""
    zone_id = callback.data.split("_")[1]
    zone_info = DELIVERY_ZONES[zone_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–æ–Ω—É
    await state.update_data(delivery_zone=zone_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user[3]:  # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å ReplyKeyboard
        await callback.message.delete()
        await callback.message.answer(
            "üì± <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_contact_keyboard(),
            parse_mode='HTML'
        )
        await state.set_state(OrderStates.waiting_contact)
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        cancel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cart")]]
        )
        
        await callback.message.edit_text(
            f"üìç <b>–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
            f"üöö –ó–æ–Ω–∞: {zone_info['name']}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {zone_info['price']}‚Çæ\n"
            f"‚è± –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {zone_info['time']}\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=cancel_keyboard,
            parse_mode='HTML'
        )
        await state.set_state(OrderStates.waiting_address)

@router.message(OrderStates.waiting_contact, F.content_type == 'contact')
async def process_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = message.contact
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await db.update_user_contact(user_id, contact.phone_number, "")
    
    data = await state.get_data()
    zone_id = data['delivery_zone']
    zone_info = DELIVERY_ZONES[zone_id]
    
    is_admin = user_id in ADMIN_IDS
    await message.answer(
        f"üìç <b>–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        f"üöö –ó–æ–Ω–∞: {zone_info['name']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {zone_info['price']}‚Çæ\n"
        f"‚è± –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {zone_info['time']}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_main_menu(is_admin=is_admin),
        parse_mode='HTML'
    )
    await state.set_state(OrderStates.waiting_address)

@router.message(OrderStates.waiting_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞"""
    address = message.text
    user_id = message.from_user.id
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å: {address} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
    
    if 'delivery_zone' not in data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
        
    zone_id = data['delivery_zone']
    zone_info = DELIVERY_ZONES[zone_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart_items = await db.get_cart(user_id)
    user = await db.get_user(user_id)
    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {cart_items}")
    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
    
    if not cart_items:
        logger.warning(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        await state.clear()
        return
    
    if not user:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º...")
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        await db.add_user(
            user_id, 
            message.from_user.username, 
            message.from_user.first_name
        )
        user = await db.get_user(user_id)
        if not user:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            await state.clear()
            return
        
    phone = user[3]
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    items_total = sum(item[1] * item[3] for item in cart_items)
    delivery_price = zone_info['price']
    total_price = items_total + delivery_price
    
    logger.info(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: —Ç–æ–≤–∞—Ä—ã={items_total}, –¥–æ—Å—Ç–∞–≤–∫–∞={delivery_price}, –∏—Ç–æ–≥–æ={total_price}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    products_data = []
    for item in cart_items:
        products_data.append({
            'id': item[0],
            'name': item[2],
            'price': item[3],
            'quantity': item[1]
        })
    
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞: {products_data}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    try:
        order_id = await db.create_order(
            user_id=user_id,
            products=products_data,
            total_price=total_price,
            delivery_zone=zone_id,
            delivery_price=delivery_price,
            phone=phone,
            address=address
        )
        logger.info(f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID: {order_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await db.clear_cart(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    order_text = f"""‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for item in products_data:
        order_text += f"‚Ä¢ {item['name']} √ó {item['quantity']} = {item['price'] * item['quantity']}‚Çæ\n"
    
    order_text += f"""
üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {zone_info['name']} - {delivery_price}‚Çæ
üìç <b>–ê–¥—Ä–µ—Å:</b> {address}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}

üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ: {total_price}‚Çæ</b>

üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>
üè¶ –ë–∞–Ω–∫: {PAYMENT_INFO['bank_name']}
üí≥ –ö–∞—Ä—Ç–∞: {PAYMENT_INFO['card']}
üì± –°–ë–ü: {PAYMENT_INFO['sbp_phone']}

‚ùó <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>
<code>–ó–∞–∫–∞–∑ #{order_id}</code>

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª(–∞)" –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç."""
    
    await message.answer(
        order_text,
        reply_markup=get_order_confirmation_keyboard(order_id),
        parse_mode='HTML'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    from config import ADMIN_IDS
    for admin_id in ADMIN_IDS:
        try:
            await message.bot.send_message(
                admin_id,
                f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} (@{message.from_user.username})\n"
                f"üí∞ –°—É–º–º–∞: {total_price}‚Çæ\n"
                f"üìç –ê–¥—Ä–µ—Å: {address}",
                parse_mode='HTML'
            )
        except:
            pass
    
    await state.clear()

@router.callback_query(F.data.startswith("payment_done_"))
async def payment_done(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ"""
    order_id = int(callback.data.split("_")[2])
    
    await state.update_data(order_id=order_id)
    
    await callback.message.edit_text(
        f"üì∏ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
        parse_mode='HTML'
    )
    
    await state.set_state(OrderStates.waiting_payment_screenshot)

@router.message(OrderStates.waiting_payment_screenshot, F.content_type == 'photo')
async def process_payment_screenshot(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    order_id = data['order_id']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    photo_file_id = message.photo[-1].file_id
    await db.update_order_screenshot(order_id, photo_file_id)
    await db.update_order_status(order_id, 'payment_check')
    
    await message.answer(
        f"‚úÖ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
        f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'",
        parse_mode='HTML'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    from config import ADMIN_IDS
    order = await db.get_order(order_id)
    for admin_id in ADMIN_IDS:
        try:
            await message.bot.send_photo(
                admin_id,
                photo=photo_file_id,
                caption=f"üí∞ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} (@{message.from_user.username})\n"
                        f"üí∞ –°—É–º–º–∞: {order[3]}‚Çæ",
                parse_mode='HTML'
            )
        except:
            pass
    
    await state.clear()

@router.callback_query(F.data == "my_orders")
async def show_my_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    orders = await db.get_user_orders(user_id)
    
    if not orders:
        await callback.message.edit_text(
            "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</b>\n\n–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            parse_mode='HTML'
        )
        return
    
    await callback.message.edit_text(
        "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=get_orders_keyboard(orders),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("order_"))
async def show_order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[1])
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã
    products = json.loads(order[2])
    
    status_text = {
        'waiting_payment': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'payment_check': 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã',
        'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
        'shipping': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    }
    
    order_text = f"""üìã <b>–ó–∞–∫–∞–∑ #{order[0]}</b>

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for product in products:
        order_text += f"‚Ä¢ {product['name']} √ó {product['quantity']} = {product['price'] * product['quantity']}‚Çæ\n"
    
    zone_info = DELIVERY_ZONES.get(order[4], {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
    
    order_text += f"""
üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {zone_info['name']} - {order[5]}‚Çæ
üìç <b>–ê–¥—Ä–µ—Å:</b> {order[7]}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order[6]}
üìÖ <b>–î–∞—Ç–∞:</b> {order[10][:16]}

üí∞ <b>–ò—Ç–æ–≥–æ: {order[3]}‚Çæ</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text.get(order[8], order[8])}"""
    
    await callback.message.edit_text(
        order_text,
        reply_markup=get_order_details_keyboard(order_id, order[8]),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    is_admin = user_id in ADMIN_IDS
    
    await callback.message.delete()
    await callback.message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(is_admin=is_admin),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "cart")
async def callback_cart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ callback"""
    await update_cart_display(callback)