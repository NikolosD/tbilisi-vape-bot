from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Contact, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
import logging

from database import db
from config import DELIVERY_ZONES, MIN_ORDER_AMOUNT, PAYMENT_INFO, ADMIN_IDS
from models import OrderStatus
from message_manager import message_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
from keyboards import (
    get_main_menu, get_main_menu_inline, get_categories_keyboard, get_catalog_keyboard, get_category_products_keyboard, get_product_card_keyboard,
    get_cart_keyboard, get_location_request_keyboard, get_location_inline_keyboard, get_order_confirmation_keyboard,
    get_orders_keyboard, get_order_details_keyboard, get_contact_keyboard, get_language_keyboard, get_back_to_menu_keyboard,
    get_quantity_input_cancel_keyboard
)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def delete_message_after_delay(bot, chat_id, message_id, delay_seconds):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
    import asyncio
    await asyncio.sleep(delay_seconds)
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
import i18n
from i18n import _
from button_filters import (
    is_catalog_button, is_cart_button, is_orders_button, 
    is_contact_button, is_info_button, is_language_button
)
from pages.manager import page_manager


router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_contact = State()
    waiting_location = State()
    waiting_address = State()
    waiting_payment_screenshot = State()
    waiting_admin_message = State()
    waiting_quantity_input = State()
    waiting_cart_quantity_input = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(is_catalog_button)
async def show_catalog(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await page_manager.catalog.show_from_message(message)

@router.message(is_cart_button)
async def show_cart(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    await page_manager.cart.show_from_message(message)

@router.message(is_orders_button)
async def show_orders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await page_manager.orders.show_from_message(message)

@router.message(is_contact_button)
async def show_contact(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    await page_manager.profile.show_from_message(message, type='contact')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
@router.message(is_language_button)
async def show_language_selection(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    await page_manager.profile.show_from_message(message, type='language')

@router.message(is_info_button)
async def show_info(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    await page_manager.info.show_from_message(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤

@router.callback_query(F.data == "catalog")
async def callback_catalog(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ callback"""
    await page_manager.catalog.show_from_callback(callback)

@router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[1])
    await page_manager.catalog.show_from_callback(callback, category_id=category_id)

@router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞"""
    data_parts = callback.data.split("_")
    product_id = int(data_parts[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏  
    from_category = None
    if len(data_parts) > 3 and data_parts[2] == "from":
        from_category = int(data_parts[3])
    
    await page_manager.catalog.show_from_callback(callback, product_id=product_id, from_category=from_category)

@router.callback_query(F.data == "noop")
async def noop_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    product = await db.get_product(product_id)
    if not product or not product.in_stock or product.stock_quantity <= 0:
        await callback.answer(_("common.error"), show_alert=True)
        return
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    user = await db.get_user(user_id)
    if not user:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await db.add_user(
            user_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_items = await db.get_cart(user_id)
    current_quantity_in_cart = 0
    for item in cart_items:
        if item.product_id == product_id:
            current_quantity_in_cart = item.quantity
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç —Å–∫–ª–∞–¥–∞
    if current_quantity_in_cart >= product.stock_quantity:
        await callback.answer(
            _("error.max_quantity", user_id=callback.from_user.id, quantity=product.stock_quantity, current=current_quantity_in_cart), 
            show_alert=True
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    await db.add_to_cart(user_id, product_id, 1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    cart_items = await db.get_cart(user_id)
    quantity_in_cart = 0
    for item in cart_items:
        if item.product_id == product_id:
            quantity_in_cart = item.quantity
            break
    
    await callback.answer(_("cart.item_added"))
    
    # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
    original_data = callback.message.reply_markup.inline_keyboard
    from_category = None
    for row in original_data:
        for button in row:
            if button.callback_data and button.callback_data.startswith("category_"):
                from_category = int(button.callback_data.split("_")[1])
                break
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    product_text = f"üõçÔ∏è {product.name}\n\n"
    product_text += f"{product.description}\n\n"
    product_text += f"üí∞ –¶–µ–Ω–∞: {product.price}‚Çæ\n"
    product_text += f"üì¶ {'–í –Ω–∞–ª–∏—á–∏–∏' if product.in_stock else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
    if quantity_in_cart > 0:
        product_text += f"üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {quantity_in_cart} —à—Ç."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = get_product_card_keyboard(product_id, in_cart=True, from_category=from_category)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(product_text, reply_markup=keyboard, parse_mode='HTML')
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception:
            pass
        await message_manager.send_or_edit_message(
            callback.bot, user_id,
            product_text,
            reply_markup=keyboard,
            menu_state='product_view',
            force_new=True
        )

@router.callback_query(F.data.startswith("cart_increase_"))
async def cart_increase(callback: CallbackQuery):
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    logger.info(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ {product_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {callback.message.text[:100]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
    product = await db.get_product(product_id)
    if not product or not product.in_stock or product.stock_quantity <= 0:
        await callback.answer(_("error.product_unavailable", user_id=callback.from_user.id), show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    cart_items = await db.get_cart(user_id)
    current_quantity = 0
    for item in cart_items:
        if item.product_id == product_id:
            current_quantity = item.quantity
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç —Å–∫–ª–∞–¥–∞
    if current_quantity >= product.stock_quantity:
        await callback.answer(
            _("error.max_quantity", user_id=callback.from_user.id, quantity=product.stock_quantity, current=0), 
            show_alert=True
        )
        return
    
    new_quantity = current_quantity + 1
    await db.update_cart_quantity(user_id, product_id, new_quantity)
    
    await callback.answer(_("cart.quantity_increased", quantity=new_quantity))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    message_text = callback.message.text or ""
    if "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:" in message_text:
        # –ú—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã...")
        await update_cart_display(callback)
    else:
        # –ú—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
        product = await db.get_product(product_id)
        if product:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_items = await db.get_cart(user_id)
            quantity_in_cart = 0
            for item in cart_items:
                if item.product_id == product_id:
                    quantity_in_cart = item.quantity
                    break
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            product_text = f"üõçÔ∏è {product.name}\n\n"
            product_text += f"{product.description}\n\n"
            product_text += f"üí∞ –¶–µ–Ω–∞: {product.price}‚Çæ\n"
            product_text += f"üì¶ {'–í –Ω–∞–ª–∏—á–∏–∏' if product.in_stock else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
            if quantity_in_cart > 0:
                product_text += f"üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {quantity_in_cart} —à—Ç."
            
            # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –∫–Ω–æ–ø–æ–∫
            from_category = None
            for row in callback.message.reply_markup.inline_keyboard:
                for button in row:
                    if button.callback_data and button.callback_data.startswith("category_"):
                        from_category = int(button.callback_data.split("_")[1])
                        break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = get_product_card_keyboard(product_id, in_cart=True, from_category=from_category)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.edit_text(product_text, reply_markup=keyboard, parse_mode='HTML')
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                await message_manager.send_or_edit_message(
                    callback.bot, user_id,
                    product_text,
                    reply_markup=keyboard,
                    menu_state='product_view',
                    force_new=True
                )

@router.callback_query(F.data.startswith("cart_decrease_"))
async def cart_decrease(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    logger.info(f"–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ {product_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    cart_items = await db.get_cart(user_id)
    current_quantity = 0
    for item in cart_items:
        if item.product_id == product_id:
            current_quantity = item.quantity
            break
    
    if current_quantity <= 1:
        await db.remove_from_cart(user_id, product_id)
        await callback.answer(_("cart.item_deleted"))
    else:
        new_quantity = current_quantity - 1
        await db.update_cart_quantity(user_id, product_id, new_quantity)
        await callback.answer(_("cart.quantity_decreased", quantity=new_quantity))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    message_text = callback.message.text or ""
    if "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:" in message_text:
        # –ú—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã...")
        await update_cart_display(callback)
    else:
        # –ú—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
        product = await db.get_product(product_id)
        if product:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_items = await db.get_cart(user_id)
            quantity_in_cart = 0
            for item in cart_items:
                if item.product_id == product_id:
                    quantity_in_cart = item.quantity
                    break
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
            product_text = f"üõçÔ∏è {product.name}\n\n"
            product_text += f"{product.description}\n\n"
            product_text += f"üí∞ –¶–µ–Ω–∞: {product.price}‚Çæ\n"
            product_text += f"üì¶ {'–í –Ω–∞–ª–∏—á–∏–∏' if product.in_stock else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
            if quantity_in_cart > 0:
                product_text += f"üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {quantity_in_cart} —à—Ç."
            
            # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –∫–Ω–æ–ø–æ–∫
            from_category = None
            for row in callback.message.reply_markup.inline_keyboard:
                for button in row:
                    if button.callback_data and button.callback_data.startswith("category_"):
                        from_category = int(button.callback_data.split("_")[1])
                        break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            keyboard = get_product_card_keyboard(product_id, in_cart=(quantity_in_cart > 0), from_category=from_category)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.edit_text(product_text, reply_markup=keyboard, parse_mode='HTML')
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                await message_manager.send_or_edit_message(
                    callback.bot, user_id,
                    product_text,
                    reply_markup=keyboard,
                    menu_state='product_view',
                    force_new=True
                )

@router.callback_query(F.data.startswith("cart_remove_"))
async def cart_remove(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    product = await db.get_product(product_id)
    await db.remove_from_cart(user_id, product_id)
    
    await callback.answer(_("cart.item_removed"))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã
    if "cart" in callback.message.text:
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã...")
        await update_cart_display(callback)
    else:
        # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
        original_data = callback.message.reply_markup.inline_keyboard
        from_category = None
        for row in original_data:
            for button in row:
                if button.callback_data and button.callback_data.startswith("category_"):
                    from_category = int(button.callback_data.split("_")[1])
                    break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
        keyboard = get_product_card_keyboard(product_id, in_cart=False, from_category=from_category)
        await callback.message.edit_reply_markup(reply_markup=keyboard)

@router.callback_query(F.data.startswith("cart_input_qty_"))
async def cart_input_quantity(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = await db.get_product(product_id)
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_items = await db.get_cart(user_id)
    current_quantity = 0
    for item in cart_items:
        if item.product_id == product_id:
            current_quantity = item.quantity
            break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º product_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(cart_product_id=product_id, cart_current_quantity=current_quantity)
    await state.set_state(OrderStates.waiting_cart_quantity_input)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è message_manager
    await message_manager.send_or_edit_message(
        callback.bot, user_id,
        f"üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        f"üõçÔ∏è {product.name}\n"
        f"üì¶ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_quantity} —à—Ç.\n"
        f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {product.stock_quantity} —à—Ç.\n\n"
        f"üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ {product.stock_quantity}\n"
        f"(0 - —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_quantity_input")]
        ]),
        menu_state='quantity_input',
        force_new=True
    )
    
    await callback.answer()

@router.message(OrderStates.waiting_cart_quantity_input)
async def process_cart_quantity_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = message.from_user.id
    
    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get('cart_product_id')
    current_quantity = data.get('cart_current_quantity', 0)
    
    if not product_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è
    product = await db.get_product(product_id)
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if quantity < 0:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        return
    
    if quantity > product.stock_quantity:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {product.stock_quantity} —à—Ç.")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass
    
    if quantity == 0:
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        await db.remove_from_cart(user_id, product_id)
        result_text = "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await db.update_cart_quantity(user_id, product_id, quantity)
        result_text = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {quantity} —à—Ç."
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    try:
        await message_manager.delete_user_message(message.bot, user_id)
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—Ö–µ
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        keyboard = get_back_to_menu_keyboard()
    else:
        total = sum(item.price * item.quantity for item in cart_items)
        cart_text = f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        
        for item in cart_items:
            cart_text += f"üõçÔ∏è {item.name}\n"
            cart_text += f"üì¶ {item.quantity} —à—Ç. √ó {item.price}‚Çæ = {item.price * item.quantity}‚Çæ\n\n"
        
        cart_text += f"üí∞ –ò—Ç–æ–≥–æ: {total}‚Çæ\n\n"
        cart_text += f"‚úÖ {result_text}"
        
        keyboard = get_cart_keyboard(cart_items)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_manager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await message_manager.send_or_edit_message(
        message.bot, user_id,
        cart_text,
        reply_markup=keyboard,
        menu_state='cart',
        force_new=False  # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    )

@router.callback_query(F.data == "cancel_quantity_input")
async def cancel_quantity_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    user_id = callback.from_user.id
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    try:
        await message_manager.delete_user_message(callback.bot, user_id)
    except:
        pass
    
    await callback.answer("‚ùå –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É—è message_manager
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        keyboard = get_back_to_menu_keyboard()
    else:
        total = sum(item.price * item.quantity for item in cart_items)
        cart_text = f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        
        for item in cart_items:
            cart_text += f"üõçÔ∏è {item.name}\n"
            cart_text += f"üì¶ {item.quantity} —à—Ç. √ó {item.price}‚Çæ = {item.price * item.quantity}‚Çæ\n\n"
        
        cart_text += f"üí∞ –ò—Ç–æ–≥–æ: {total}‚Çæ"
        
        keyboard = get_cart_keyboard(cart_items)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_manager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await message_manager.send_or_edit_message(
        callback.bot, user_id,
        cart_text,
        reply_markup=keyboard,
        menu_state='cart',
        force_new=False
    )

async def update_cart_display(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = callback.from_user.id
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        await message_manager.send_or_edit_message(
            callback.bot, user_id,
            "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=_("common.to_catalog"), callback_data="catalog")],
                [InlineKeyboardButton(text=_("common.main_menu"), callback_data="back_to_menu")]
            ]),
            menu_state='cart',
            force_new=True
        )
        return
    
    total = sum(item.quantity * item.price for item in cart_items)
    
    cart_text = f"{_('cart.title', user_id=user_id)}\n\n"
    for item in cart_items:
        cart_text += _("cart.item", 
                      name=item.name,
                      quantity=item.quantity, 
                      price=item.price,
                      total=item.price * item.quantity,
                      user_id=user_id)
    
    cart_text += _("cart.total", total=total, user_id=user_id)
    
    await message_manager.send_or_edit_message(
        callback.bot, user_id,
        cart_text,
        reply_markup=get_cart_keyboard(cart_items),
        menu_state='cart',
        force_new=False  # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    )

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = callback.from_user.id
    await db.clear_cart(user_id)
    
    await message_manager.handle_callback_navigation(
        callback,
        "üóë <b>–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=_("common.to_catalog", user_id=user_id), callback_data="catalog")],
            [InlineKeyboardButton(text=_("common.main_menu", user_id=user_id), callback_data="back_to_menu")]
        ]),
        menu_state='cart_cleared'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.callback_query(F.data.startswith("set_quantity_"))
async def set_quantity(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º from_category –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    from_category = None
    if callback.message.reply_markup:
        for row in callback.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data and button.callback_data.startswith("category_"):
                    from_category = int(button.callback_data.split("_")[1])
                    break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        product_id=product_id,
        original_message_id=callback.message.message_id,
        original_text=callback.message.text,
        original_markup=callback.message.reply_markup,
        from_category=from_category  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    quantity_message = await callback.message.edit_text(
        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999",
        reply_markup=get_quantity_input_cancel_keyboard(),
        parse_mode='HTML'
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º state —Å ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await state.update_data(quantity_message_id=quantity_message.message_id)
    
    await state.set_state(OrderStates.waiting_quantity_input)

@router.callback_query(F.data.startswith("cancel_quantity_") & ~F.data.endswith("_input"))
async def cancel_quantity(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    product_id = int(callback.data.split("_")[2])
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    if 'original_text' in data and 'original_markup' in data:
        await callback.message.edit_text(
            data['original_text'],
            reply_markup=data['original_markup'],
            parse_mode='HTML'
        )
    
    await state.clear()
    await callback.answer("‚ùå –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω")

@router.message(OrderStates.waiting_quantity_input)
async def process_quantity_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    user_id = message.from_user.id
    data = await state.get_data()
    product_id = data.get('product_id')
    
    if not product_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä")
        await state.clear()
        return
    
    try:
        quantity = int(message.text.strip())
        
        if quantity < 1 or quantity > 999:
            await message.answer(
                _("error.quantity_range", user_id=user_id),
                reply_markup=get_quantity_input_cancel_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
        product = await db.get_product(product_id)
        if not product or not product.in_stock:
            await message.answer(_("error.product_unavailable", user_id=user_id))
            await state.clear()
            return
        
        if quantity > product.stock_quantity:
            await message.answer(
                _("error.stock_limit", user_id=user_id, stock=product.stock_quantity),
                reply_markup=get_quantity_input_cancel_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        await db.update_cart_quantity(user_id, product_id, quantity)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity_message_id = data.get('quantity_message_id')
        if quantity_message_id:
            try:
                await message.bot.delete_message(chat_id=user_id, message_id=quantity_message_id)
            except Exception:
                pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = await db.get_cart(user_id)
        quantity_in_cart = 0
        for item in cart_items:
            if item.product_id == product_id:
                quantity_in_cart = item.quantity
                break
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
        product_text = f"üõçÔ∏è {product.name}\n\n"
        product_text += f"{product.description}\n\n"
        product_text += f"üí∞ –¶–µ–Ω–∞: {product.price}‚Çæ\n"
        product_text += f"üì¶ {'–í –Ω–∞–ª–∏—á–∏–∏' if product.in_stock else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
        if quantity_in_cart > 0:
            product_text += f"üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {quantity_in_cart} —à—Ç."
        
        # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        from_category = data.get('from_category')
        if not from_category and data.get('original_markup'):
            for row in data['original_markup'].inline_keyboard:
                for button in row:
                    if button.callback_data and button.callback_data.startswith("category_"):
                        from_category = int(button.callback_data.split("_")[1])
                        break
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        original_message_id = data.get('original_message_id')
        
        try:
            await message.bot.edit_message_text(
                chat_id=user_id,
                message_id=original_message_id,
                text=product_text,
                reply_markup=get_product_card_keyboard(product_id, in_cart=True, from_category=from_category),
                parse_mode='HTML'
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                product_text,
                reply_markup=get_product_card_keyboard(product_id, in_cart=True, from_category=from_category),
                parse_mode='HTML'
            )
        
        
    except ValueError:
        await message.answer(
            _("error.invalid_number", user_id=user_id),
            reply_markup=get_quantity_input_cancel_keyboard()
        )
        return
    
    await state.clear()

@router.callback_query(F.data == "cancel_quantity_input", OrderStates.waiting_quantity_input)
async def cancel_quantity_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    user_id = callback.from_user.id
    data = await state.get_data()
    product_id = data.get('product_id')
    
    await state.clear()
    
    if not product_id:
        await callback.answer(_("error.product_not_found", user_id=user_id))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
    product = await db.get_product(product_id)
    if not product:
        await callback.answer(_("error.product_not_found", user_id=user_id))
        return
    
    cart_items = await db.get_cart(user_id)
    quantity_in_cart = 0
    for item in cart_items:
        if item.product_id == product_id:
            quantity_in_cart = item.quantity
            break
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
    product_text = f"üõçÔ∏è {product.name}\n\n"
    product_text += f"{product.description}\n\n"
    product_text += f"üí∞ {_('product.price', user_id=user_id)} {product.price}‚Çæ\n"
    product_text += f"üì¶ {_('product.in_stock', user_id=user_id) if product.in_stock else _('product.out_of_stock', user_id=user_id)}\n"
    if quantity_in_cart > 0:
        product_text += f"üõí {_('product.in_cart_quantity', user_id=user_id)} {quantity_in_cart} {_('product.pieces', user_id=user_id)}"
    
    # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    from_category = data.get('from_category')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(
            product_text,
            reply_markup=get_product_card_keyboard(product_id, in_cart=(quantity_in_cart > 0), from_category=from_category),
            parse_mode='HTML'
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            product_text,
            reply_markup=get_product_card_keyboard(product_id, in_cart=(quantity_in_cart > 0), from_category=from_category),
            parse_mode='HTML'
        )
    
    await callback.answer(_("error.quantity_input_cancelled", user_id=user_id))

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_id = callback.from_user.id
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        await callback.answer(_("cart.empty"), show_alert=True)
        return
    
    total = sum(item[1] * item[3] for item in cart_items)
    
    if total < MIN_ORDER_AMOUNT:
        await callback.answer(
            _("error.min_order_amount", user_id=callback.from_user.id, amount=MIN_ORDER_AMOUNT),
            show_alert=True
        )
        return
    
    # –£–¥–∞–ª—è–µ–º inline —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()
    
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª checkout, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
    
    location_request_msg = await callback.message.answer(
        _("checkout.location_request", user_id=user_id).format(total=total),
        reply_markup=get_location_request_keyboard(user_id=user_id),
        parse_mode='HTML'
    )
    
    await state.set_state(OrderStates.waiting_location)
    await state.update_data(total=total, location_request_msg_id=location_request_msg.message_id)
    
    print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_location –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í–´–®–ï –¢–ï–ö–°–¢–û–í–û–ì–û!)
@router.message(OrderStates.waiting_location, F.location)
async def process_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    location = message.location
    
    current_state = await state.get_state()
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: lat={location.latitude}, lon={location.longitude}")
    print(f"DEBUG: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_state}")
    
    # –£–±–∏—Ä–∞–µ–º Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from aiogram.types import ReplyKeyboardRemove
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    await state.update_data(
        latitude=location.latitude,
        longitude=location.longitude
    )
    
    location_msg = await message.answer(
        _("checkout.location_received", user_id=user_id).format(
            lat=location.latitude,
            lon=location.longitude
        ),
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='HTML'
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–æ—á–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    address_msg = await message.answer(
        _("checkout.enter_exact_address", user_id=user_id),
        parse_mode='HTML'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(
        location_msg_id=location_msg.message_id,
        address_msg_id=address_msg.message_id,
        location_map_msg_id=message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    )
    
    await state.set_state(OrderStates.waiting_address)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é" –∏–∑ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.message(OrderStates.waiting_location, F.text)
async def handle_manual_address_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é' –≤ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    user_id = message.from_user.id
    
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message.text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∫–Ω–æ–ø–∫–∞ "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é"
    if message.text == _("checkout.manual_address", user_id=user_id):
        # –£–±–∏—Ä–∞–µ–º Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∞–¥—Ä–µ—Å–∞
        from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
        
        await message.answer(
            _("checkout.enter_address", user_id=user_id),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='HTML'
        )
        
        address_msg = await message.answer(
            "üëÜ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=_("common.back", user_id=user_id), callback_data="cart")]
            ])
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        data = await state.get_data()
        await state.update_data(address_msg_id=address_msg.message_id)
        
        await state.set_state(OrderStates.waiting_address)
    elif message.text == "üó∫Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ":
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é
        from aiogram.types import ReplyKeyboardRemove
        
        await message.answer(
            "üìç <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:</b>\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª üåç\n"
            "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ\n\n"
            "<i>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:</i>",
            reply_markup=get_location_request_keyboard(user_id=user_id),
            parse_mode='HTML'
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∞–¥—Ä–µ—Å
        await message.answer(
            "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=get_location_request_keyboard(user_id=user_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä–æ–π inline –∫–Ω–æ–ø–∫–∏ (–æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@router.callback_query(F.data == "manual_address")
async def manual_address(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é (inline –∫–Ω–æ–ø–∫–∞)"""
    user_id = callback.from_user.id
    
    await callback.message.edit_text(
        _("checkout.enter_address", user_id=user_id),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=_("common.back", user_id=user_id), callback_data="cart")]
        ]),
        parse_mode='HTML'
    )
    
    await state.set_state(OrderStates.waiting_address)

# –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω

# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ delivery –∑–æ–Ω —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è

@router.message(OrderStates.waiting_contact, F.content_type == 'contact')
async def process_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = message.contact
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await db.update_user_contact(user_id, contact.phone_number, "")
    
    data = await state.get_data()
    zone_id = data['delivery_zone']
    zone_info = DELIVERY_ZONES[zone_id]
    
    is_admin = user_id in ADMIN_IDS
    await message.answer(
        f"üìç <b>–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        f"üöö –ó–æ–Ω–∞: {zone_info['name']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {zone_info['price']}‚Çæ\n"
        f"‚è± –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {zone_info['time']}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_main_menu(is_admin=is_admin),
        parse_mode='HTML'
    )
    await state.set_state(OrderStates.waiting_address)

@router.message(OrderStates.waiting_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞"""
    address = message.text
    user_id = message.from_user.id
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å: {address} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –∏ –∑–∞–ø—Ä–æ—Å–æ–º –∞–¥—Ä–µ—Å–∞
    location_msg_id = data.get('location_msg_id')
    address_msg_id = data.get('address_msg_id')
    location_map_msg_id = data.get('location_map_msg_id')
    location_request_msg_id = data.get('location_request_msg_id')
    
    if location_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=location_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    if address_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=address_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    if location_map_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=location_map_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    if location_request_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=location_request_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–¥—Ä–µ—Å–æ–º
    try:
        await message.delete()
    except Exception:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—â–∞—è —Å—É–º–º–∞
    if 'total' not in data:
        await message.answer(_("common.error"))
        await state.clear()
        return
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–µ—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)
    latitude = data.get('latitude')
    longitude = data.get('longitude')
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è)
    delivery_price = 10  # 10‚Çæ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart_items = await db.get_cart(user_id)
    user = await db.get_user(user_id)
    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {cart_items}")
    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
    
    if not cart_items:
        logger.warning(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(_("cart.empty"))
        await state.clear()
        return
    
    if not user:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º...")
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        await db.add_user(
            user_id, 
            message.from_user.username, 
            message.from_user.first_name
        )
        user = await db.get_user(user_id)
        if not user:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            await state.clear()
            return
        
    phone = user.phone
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    items_total = sum(float(item.quantity * item.price) for item in cart_items)
    total_price = items_total + delivery_price
    
    logger.info(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: —Ç–æ–≤–∞—Ä—ã={items_total}, –¥–æ—Å—Ç–∞–≤–∫–∞={delivery_price}, –∏—Ç–æ–≥–æ={total_price}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    products_data = []
    for item in cart_items:
        products_data.append({
            'id': item.product_id,
            'name': item.name,
            'price': float(item.price),
            'quantity': item.quantity
        })
    
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞: {products_data}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    try:
        order_id = await db.create_order(
            user_id=user_id,
            products=products_data,
            total_price=total_price,
            delivery_zone="custom",  # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—É—é –∑–æ–Ω—É
            delivery_price=delivery_price,
            phone=phone,
            address=address,
            latitude=latitude,
            longitude=longitude
        )
        logger.info(f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å –Ω–æ–º–µ—Ä–æ–º: {order_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await db.clear_cart(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    order_text = f"""‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for item in products_data:
        order_text += f"‚Ä¢ {item['name']} √ó {item['quantity']} = {item['price'] * item['quantity']}‚Çæ\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    delivery_info = "–ü–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"
    if latitude and longitude:
        delivery_info = f"–ü–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ({latitude:.6f}, {longitude:.6f})"
    
    order_text += f"""
üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_info} - {delivery_price}‚Çæ
üìç <b>–ê–¥—Ä–µ—Å:</b> {address}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}

üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ: {total_price}‚Çæ</b>

üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>
üè¶ –ë–∞–Ω–∫: {PAYMENT_INFO['bank_name']}
üí≥ –ö–∞—Ä—Ç–∞: {PAYMENT_INFO['card']}
üì± –°–ë–ü: {PAYMENT_INFO['sbp_phone']}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª(–∞)" –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç."""
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–¥—Ä–µ—Å–æ–º
    try:
        await message.delete()
    except Exception:
        pass
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∞–¥—Ä–µ—Å–∞
    try:
        await message_manager.delete_user_message(message.bot, user_id)
    except Exception:
        pass
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message_manager.send_or_edit_message(
        message.bot, user_id,
        order_text,
        reply_markup=get_order_confirmation_keyboard(order_id, user_id=user_id),
        menu_state='order_created',
        force_new=True
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã
    
    await state.clear()

@router.callback_query(F.data.startswith("payment_done_"))
async def payment_done(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ"""
    order_id = int(callback.data.split("_")[2])
    
    await state.update_data(order_id=order_id)
    
    await callback.message.edit_text(
        f"üì∏ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
        parse_mode='HTML'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    user_id = callback.from_user.id
    message_manager.set_user_message(user_id, callback.message.message_id, 'waiting_screenshot')
    
    await state.set_state(OrderStates.waiting_payment_screenshot)

@router.message(OrderStates.waiting_payment_screenshot, F.content_type == 'photo')
async def process_payment_screenshot(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    order_id = data['order_id']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    photo_file_id = message.photo[-1].file_id
    await db.update_order_screenshot_by_number(order_id, photo_file_id)
    await db.update_order_status_by_number(order_id, 'payment_check')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
    try:
        await message.delete()
    except Exception:
        pass
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    user_id = message.from_user.id
    try:
        await message_manager.delete_user_message(message.bot, user_id)
    except Exception:
        pass
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message_manager.send_or_edit_message(
        message.bot, user_id,
        f"‚úÖ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
        f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]),
        menu_state='screenshot_confirmed',
        force_new=True
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    from config import ADMIN_IDS, DELIVERY_ZONES
    import json
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã ADMIN_IDS –∏–∑ config: {ADMIN_IDS}")
    logger.info(f"–¢–∏–ø ADMIN_IDS: {type(ADMIN_IDS)}")
    
    logger.info(f"–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ {order_id} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤")
    order = await db.get_order_by_number(order_id)
    
    if not order:
        logger.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    logger.info(f"–ó–∞–∫–∞–∑ {order_id} –Ω–∞–π–¥–µ–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
    logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–∫–∞–∑–∞: {order}")
    
    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã  
    products = order.products_data
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await db.get_user(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∑–∞–∫–∞–∑–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    latitude = getattr(order, 'latitude', None)
    longitude = getattr(order, 'longitude', None)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    admin_lang = 'ru'  # –Ø–∑—ã–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    admin_text = f"""{_("admin_notifications.new_order", user_id=617646449).format(order_number=order.order_number)}

{_("admin_notifications.user", user_id=617646449)} {message.from_user.first_name or _("admin_notifications.unknown", user_id=617646449)} (@{message.from_user.username or _("admin_notifications.no_username", user_id=617646449)})
{_("admin_notifications.amount", user_id=617646449)} {order.total_price}‚Çæ
{_("admin_notifications.address", user_id=617646449)} {order.address}
"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if latitude and longitude:
        admin_text += f"{_('admin_notifications.coordinates', user_id=617646449)} {latitude:.6f}, {longitude:.6f}\n"
    
    admin_text += f"\n{_('admin_notifications.order_content', user_id=617646449)}\n"
    
    for product in products:
        admin_text += f"‚Ä¢ {product['name']} √ó {product['quantity']} = {product['price'] * product['quantity']}‚Çæ\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ —Å —É—á–µ—Ç–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    if order.delivery_zone == "custom":
        delivery_info = _("admin_notifications.by_coordinates", user_id=617646449)
        if latitude and longitude:
            delivery_info = f"{_('admin_notifications.by_coordinates', user_id=617646449)} ({latitude:.6f}, {longitude:.6f})"
    else:
        zone_info = DELIVERY_ZONES.get(order.delivery_zone, {'name': _("admin_notifications.unknown", user_id=617646449)})
        delivery_info = zone_info['name']
    
    admin_text += f"""
{_("admin_notifications.delivery", user_id=617646449)} {delivery_info} - {order.delivery_price}‚Çæ
{_("admin_notifications.phone", user_id=617646449)} {order.phone}
{_("admin_notifications.order_date", user_id=617646449)} {str(order.created_at)[:16]}

{_("admin_notifications.payment_screenshot", user_id=617646449)}
{_("admin_notifications.awaiting_verification", user_id=617646449)}"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    from keyboards import get_payment_notification_keyboard
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º. ADMIN_IDS: {ADMIN_IDS}")
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}")
    
    if not ADMIN_IDS:
        logger.error("ADMIN_IDS –ø—É—Å—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS")
        return
    
    for admin_id in ADMIN_IDS:
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}")
            await message.bot.send_photo(
                admin_id,
                photo=photo_file_id,
                caption=admin_text,
                reply_markup=get_payment_notification_keyboard(order.id),
                parse_mode='HTML'
            )
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
    
    await state.clear()

@router.callback_query(F.data == "my_orders")
async def show_my_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await page_manager.orders.show_from_callback(callback)

@router.callback_query(F.data.startswith("orders_page_"))
async def orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    page = int(callback.data.split("_")[2])
    await page_manager.orders.show_from_callback(callback, page=page)

@router.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    order_number = int(callback.data.split("_")[2])  # –≠—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –Ω–µ ID
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    order = await db.get_order_by_number(order_number)
    if not order or order.user_id != user_id:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—É)
    if order.status not in [OrderStatus.WAITING_PAYMENT.value, OrderStatus.PAYMENT_CHECK.value]:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å", show_alert=True)
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
    import json
    products = json.loads(order.products)
    for product in products:
        await db.increase_product_quantity(product['id'], product['quantity'])
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
    await db.update_order_status(order.id, 'cancelled')
    
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message_manager.handle_callback_navigation(
        callback,
        "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        f"–ó–∞–∫–∞–∑ #{order.order_number} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]),
        menu_state='order_cancelled'
    )

@router.callback_query(F.data.startswith("order_"))
async def show_order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[1])
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = order.products_data
    
    status_text = {
        'waiting_payment': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'payment_check': 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã',
        'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
        'shipping': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    }
    
    order_text = f"""üìã <b>–ó–∞–∫–∞–∑ #{order.order_number}</b>

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for product in products:
        order_text += f"‚Ä¢ {product['name']} √ó {product['quantity']} = {product['price'] * product['quantity']}‚Çæ\n"
    
    zone_info = DELIVERY_ZONES.get(order.delivery_zone, {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
    
    order_text += f"""
üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {zone_info['name']} - {order.delivery_price}‚Çæ
üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}
üìÖ <b>–î–∞—Ç–∞:</b> {str(order.created_at)[:16]}

üí∞ <b>–ò—Ç–æ–≥–æ: {order.total_price}‚Çæ</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text.get(order.status, order.status)}"""
    
    await callback.message.edit_text(
        order_text,
        reply_markup=get_order_details_keyboard(order_id, order.status),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    is_admin = user_id in ADMIN_IDS
    
    await message_manager.handle_callback_navigation(
        callback,
        _("welcome.title", user_id=user_id) + "\n\n" + _("welcome.description", user_id=user_id),
        reply_markup=get_main_menu_inline(is_admin=is_admin, user_id=user_id),
        menu_state='main'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
@router.callback_query(F.data.startswith("lang_"))
async def change_language(callback: CallbackQuery):
    """–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    language = callback.data.split("_")[1]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    i18n.i18n.set_language(language, user_id)
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤ —è–∑—ã–∫–æ–≤ —Å –∫–ª—é—á–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    language_mapping = {
        'ru': 'russian',
        'en': 'english',
        'ka': 'georgian'
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    language_key = language_mapping.get(language, language)
    language_name = _(f"language.{language_key}", user_id=user_id)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–º–µ–Ω—É —è–∑—ã–∫–∞
    await callback.answer(_("language.changed", user_id=user_id, language=language_name))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º —á–µ—Ä–µ–∑ message_manager
    is_admin = user_id in ADMIN_IDS
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_manager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–º–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    await message_manager.handle_callback_navigation(
        callback,
        _("welcome.title", user_id=user_id) + "\n\n" + _("welcome.description", user_id=user_id),
        reply_markup=get_main_menu_inline(is_admin=is_admin, user_id=user_id),
        menu_state='main'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "catalog")
async def callback_catalog(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ callback"""
    await page_manager.catalog.show_from_callback(callback)

@router.callback_query(F.data == "cart")
async def callback_cart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ callback"""
    await page_manager.cart.show_from_callback(callback)

@router.callback_query(F.data == "my_orders")
async def callback_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ callback"""
    await page_manager.orders.show_from_callback(callback)

@router.callback_query(F.data == "contact")
async def callback_contact(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ callback"""
    await page_manager.profile.show_from_callback(callback, type='contact')

@router.callback_query(F.data == "info")
async def callback_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ callback"""
    await page_manager.info.show_from_callback(callback)

@router.callback_query(F.data == "language")
async def callback_language(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ callback"""
    await page_manager.profile.show_from_callback(callback, type='language')

# –í—Å–µ callback —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç page_manager - –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω

@router.callback_query(F.data == "message_admin")
async def start_message_to_admin(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user_id = callback.from_user.id
    
    await callback.answer()
    await callback.message.edit_text(
        _("contact.message_form", user_id=user_id),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=_("common.cancel", user_id=user_id), callback_data="contact")]
        ]),
        parse_mode='HTML'
    )
    
    await state.set_state(OrderStates.waiting_admin_message)

@router.message(OrderStates.waiting_admin_message, F.text)
async def process_admin_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        from config import ADMIN_IDS, SUPER_ADMIN_ID
        admin_message = (
            f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ <b>–û—Ç:</b> {message.from_user.first_name}"
        )
        
        if message.from_user.username:
            admin_message += f" (@{message.from_user.username})"
        
        admin_message += f"\nüÜî <b>ID:</b> {user_id}\n\n"
        admin_message += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message.text}\n\n"
        admin_message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        admin_message += f"<i>–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ¬´–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É¬ª –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É
        if SUPER_ADMIN_ID:
            await message.bot.send_message(
                SUPER_ADMIN_ID,
                admin_message,
                parse_mode='HTML'
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            if admin_id != SUPER_ADMIN_ID:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    await message.bot.send_message(
                        admin_id,
                        admin_message,
                        parse_mode='HTML'
                    )
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–∞–º
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            _("contact.message_sent", user_id=user_id),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=_("common.main_menu", user_id=user_id), callback_data="main_menu")]
            ]),
            parse_mode='HTML'
        )
        
    except Exception as e:
        # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await message.answer(
            _("contact.message_error", user_id=user_id),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=_("common.main_menu", user_id=user_id), callback_data="main_menu")]
            ]),
            parse_mode='HTML'
        )
    
    await state.clear()

@router.callback_query(F.data.startswith("resend_screenshot_"))
async def resend_screenshot(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã"""
    order_number = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    order = await db.get_order_by_number(order_number)
    if not order or order.user_id != user_id:
        await callback.answer(_("error.order_not_found", user_id=user_id), show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_id=order_number)
    await state.set_state(OrderStates.waiting_payment_screenshot)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    await callback.message.edit_text(
        f"üì∏ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞</b>\n\n"
        f"üìã –ó–∞–∫–∞–∑ #{order_number}\n"
        f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {order.total_price}‚Çæ\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=_("common.cancel", user_id=user_id), callback_data="my_orders")]
        ]),
        parse_mode='HTML'
    )
    
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    from config import ADMIN_IDS, SUPER_ADMIN_ID
    is_admin = user_id in ADMIN_IDS or user_id == SUPER_ADMIN_ID
    
    try:
        await callback.message.edit_text(
            _("welcome.title", user_id=user_id) + "\n\n" + 
            _("welcome.description", user_id=user_id),
            reply_markup=get_main_menu_inline(is_admin=is_admin, user_id=user_id),
            parse_mode='HTML'
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        await callback.message.answer(
            _("welcome.title", user_id=user_id) + "\n\n" + 
            _("welcome.description", user_id=user_id),
            reply_markup=get_main_menu_inline(is_admin=is_admin, user_id=user_id),
            parse_mode='HTML'
        )

# –û–±—â–∏–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_location (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ú!)
@router.message(OrderStates.waiting_location)
async def debug_waiting_location(message: Message, state: FSMContext):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ waiting_location"""
    user_id = message.from_user.id
    current_state = await state.get_state()
    
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
    print(f"DEBUG: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}")
    if message.text:
        print(f"DEBUG: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{message.text}'")
    if message.location:
        print(f"DEBUG: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat={message.location.latitude}, lon={message.location.longitude}")
    
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å
    await message.answer("ü§î –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
