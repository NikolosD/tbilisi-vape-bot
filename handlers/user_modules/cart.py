from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import db
from keyboards import (
    get_cart_keyboard, get_product_card_keyboard, get_back_to_menu_keyboard
)
from message_manager import message_manager
from i18n import _
from button_filters import is_cart_button
from pages.manager import page_manager
from utils.formatters import format_product_card, format_cart_display
from utils.loader import loader_manager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def delete_message_after_delay(bot, chat_id, message_id, delay_seconds):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
    import asyncio
    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay_seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
    await asyncio.sleep(delay_seconds)
    try:
        logger.info(f"–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

async def update_cart_display(callback: CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ (—Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    message_text = callback.message.text or ""
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{message_text[:50]}...'")
    
    # –ö–æ—Ä–∑–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ù–ê–ß–ò–ù–ê–¢–¨–°–Ø —Å "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:" –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å "üí∞ –ò—Ç–æ–≥–æ:"
    is_cart_page = (
        message_text.startswith("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:") or 
        "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:" in message_text or
        "üí∞ –ò—Ç–æ–≥–æ:" in message_text
    )
    
    logger.info(f"üîç is_cart_page: {is_cart_page}")
    
    if is_cart_page:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        had_cart_items = "üí∞ –ò—Ç–æ–≥–æ:" in message_text
        
        # –ú—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —á–µ—Ä–µ–∑ page_manager...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_data = await page_manager.cart.render(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        cart_became_empty = had_cart_items and "–ø—É—Å—Ç–∞" in page_data['text']
        
        if cart_became_empty:
            # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç —Ä–µ–∑–µ—Ä–≤ –∏—Å—Ç–µ–∫
            logger.info("üïê –†–µ–∑–µ—Ä–≤ –∫–æ—Ä–∑–∏–Ω—ã –∏—Å—Ç–µ–∫, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await callback.answer("‚è∞ –í—Ä–µ–º—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å—Ç–µ–∫–ª–æ. –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", show_alert=True)
        
        # –¢–û–õ–¨–ö–û —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.edit_text(
                page_data['text'],
                reply_markup=page_data['keyboard'],
                parse_mode='HTML'
            )
            logger.info("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_msg = await callback.message.answer(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∑–∞–Ω–æ–≤–æ",
                parse_mode='HTML'
            )
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            import asyncio
            asyncio.create_task(delete_message_after_delay(callback.bot, callback.message.chat.id, error_msg.message_id, 3))
        return True
    return False

logger = logging.getLogger(__name__)

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_cart_operations = {}

async def safe_cart_operation(user_id: int, callback: CallbackQuery, operation_func):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç race conditions"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_cart_operations:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...", show_alert=False)
        return
    
    try:
        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞
        user_cart_operations[user_id] = True
        await operation_func()
    finally:
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        user_cart_operations.pop(user_id, None)

class CartStates(StatesGroup):
    waiting_cart_quantity_input = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(is_cart_button)
async def show_cart(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    print(f"üõí CART DEBUG: Handler called for text '{message.text}' from user {message.from_user.id}")
    try:
        await page_manager.cart.show_from_message(message)
        print(f"üõí CART DEBUG: show_from_message completed successfully")
    except Exception as e:
        print(f"üõí CART ERROR: {e}")
        import traceback
        traceback.print_exc()

@router.callback_query(F.data == "cart")
async def callback_cart(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ callback"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
    from utils.loader import show_simple_loader, hide_simple_loader
    loader_id = await show_simple_loader(callback, callback.from_user.id, "–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É...")
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
        result = await page_manager.cart.render(callback.from_user.id)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await hide_simple_loader(loader_id, callback, result['text'], result['keyboard'])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await hide_simple_loader(loader_id, callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    data_parts = callback.data.split("_")
    product_id = int(data_parts[3])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∏–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—à–ª–∏
    from_category = None
    if len(data_parts) > 5 and data_parts[4] == "from":
        from_category = int(data_parts[5])
    
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
    from utils.loader import show_simple_loader, hide_simple_loader
    loader_id = await show_simple_loader(callback, user_id, "–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É...")
    
    try:
    
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º fast-–ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        product = await db.get_product_with_availability(product_id)
        if not product or not product.in_stock or product.stock_quantity <= 0:
            await hide_simple_loader(loader_id, callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
        user = await db.get_user(user_id)
        if not user:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            user_lang = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
            if callback.from_user.language_code:
                if callback.from_user.language_code.startswith('ka'):
                    user_lang = 'ka'
                elif callback.from_user.language_code.startswith('en'):
                    user_lang = 'en'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
            await db.add_user(
                user_id=user_id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                language_code=user_lang
            )
    
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        current_quantity_in_cart = await db.get_product_quantity_in_cart(user_id, product_id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        available_quantity = product.stock_quantity
        if available_quantity <= 0:
            await hide_simple_loader(loader_id, callback, "‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if current_quantity_in_cart >= available_quantity:
            await hide_simple_loader(loader_id, callback, f"‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available_quantity} —à—Ç. (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ)")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        success = await db.add_to_cart(user_id, product_id, current_quantity_in_cart + 1)
        if not success:
            await hide_simple_loader(loader_id, callback, "‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É")
            return
    
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–º–µ—Å—Ç–æ –µ—â–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        quantity_in_cart = current_quantity_in_cart + 1
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
        from utils.formatters import format_product_card_fast
        product_text = format_product_card_fast(product, quantity_in_cart, callback.from_user.id)
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        keyboard = get_product_card_keyboard(product_id, in_cart=True, from_category=from_category)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await hide_simple_loader(loader_id, callback, product_text, keyboard)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=False)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        try:
            await hide_simple_loader(loader_id, callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            pass



@router.callback_query(F.data.startswith("cart_remove_"))
async def cart_remove(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async def remove_operation():
        logger.info(f"cart_remove: product_id={product_id}, user_id={user_id}")
        
        product = await db.get_product(product_id)
        await db.remove_from_cart(user_id, product_id)
        
        await callback.answer(_("cart.item_removed"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        cart_updated = await update_cart_display(callback)
        
        if not cart_updated:
            # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
            original_data = callback.message.reply_markup.inline_keyboard
            from_category = None
            for row in original_data:
                for button in row:
                    if button.callback_data and button.callback_data.startswith("category_"):
                        from_category = int(button.callback_data.split("_")[1])
                        break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
            keyboard = get_product_card_keyboard(product_id, in_cart=False, from_category=from_category)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
    
    await safe_cart_operation(user_id, callback, remove_operation)

@router.callback_query(F.data.startswith("cart_input_qty_"))
async def cart_input_quantity(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
    from utils.loader import show_simple_loader, hide_simple_loader
    loader_id = await show_simple_loader(callback, user_id, "–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")
    
    try:
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        product = await db.get_product_with_availability(product_id)
        if not product:
            await hide_simple_loader(loader_id, callback, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        current_quantity = await db.get_product_quantity_in_cart(user_id, product_id)
        
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –∑–Ω–∞—á–∏—Ç —Ä–µ–∑–µ—Ä–≤ –∏—Å—Ç–µ–∫
        if current_quantity == 0:
            await hide_simple_loader(loader_id, callback, "‚è∞ –í—Ä–µ–º—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
            return
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        available_quantity = product.stock_quantity
        max_available_for_user = available_quantity + current_quantity
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º product_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(cart_product_id=product_id, cart_current_quantity=current_quantity)
        await state.set_state(CartStates.waiting_cart_quantity_input)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await hide_simple_loader(
            loader_id, 
            callback,
            f"üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
            f"üõçÔ∏è {product.name}\n"
            f"üì¶ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_quantity} —à—Ç.\n"
            f"üì¶ –í—Å–µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {product.stock_quantity} —à—Ç.\n"
            f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—Å: {max_available_for_user} —à—Ç.\n\n"
            f"üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ {max_available_for_user}\n"
            f"(0 - —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)",
            InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_quantity_input")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await hide_simple_loader(loader_id, callback, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(CartStates.waiting_cart_quantity_input)
async def process_cart_quantity_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = message.from_user.id
    
    try:
        quantity = int(message.text)
    except ValueError:
        error_msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(last_error_msg_id=error_msg.message_id)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get('cart_product_id')
    current_quantity = data.get('cart_current_quantity', 0)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    last_error_msg_id = data.get('last_error_msg_id')
    if last_error_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=last_error_msg_id)
        except:
            pass
    
    if not product_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è
    product = await db.get_product(product_id)
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
    try:
        await message.delete()
    except:
        pass
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    try:
        await message_manager.delete_user_message(message.bot, user_id)
    except:
        pass
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–∞–¥–µ—Ä
    from utils.loader import show_simple_loader, hide_simple_loader
    loader_message = await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É...")
    loader_id = await show_simple_loader(
        type('MockCallback', (), {
            'message': loader_message,
            'from_user': type('User', (), {'id': user_id})(),
            'bot': message.bot
        })(),
        user_id, 
        "–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É..."
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if quantity < 0:
        await hide_simple_loader(
            loader_id, 
            type('MockCallback', (), {
                'message': loader_message,
                'from_user': type('User', (), {'id': user_id})(),
                'bot': message.bot
            })(),
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º",
            InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_quantity_input")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤–æ–≤
    available_quantity = await db.get_available_product_quantity(product_id)
    user_cart_quantity = current_quantity  # –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    available_for_user = available_quantity + user_cart_quantity
    
    if quantity > available_for_user:
        await hide_simple_loader(
            loader_id, 
            type('MockCallback', (), {
                'message': loader_message,
                'from_user': type('User', (), {'id': user_id})(),
                'bot': message.bot
            })(),
            f"‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available_for_user} —à—Ç. (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_quantity_input")]
            ])
        )
        return
    
    try:
        if quantity == 0:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            await db.remove_from_cart(user_id, product_id)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è
            success = await db.update_cart_quantity(user_id, product_id, quantity)
            if not success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                await hide_simple_loader(
                    loader_id, 
                    type('MockCallback', (), {
                        'message': loader_message,
                        'from_user': type('User', (), {'id': user_id})(),
                        'bot': message.bot
                    })(),
                    "‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_quantity_input")]
                    ])
                )
                return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤–∫–ª—é—á–∞—è ID –æ—à–∏–±–∫–∏)
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        page_data = await page_manager.cart.render(user_id)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await hide_simple_loader(
            loader_id, 
            type('MockCallback', (), {
                'message': loader_message,
                'from_user': type('User', (), {'id': user_id})(),
                'bot': message.bot
            })(),
            page_data['text'],
            page_data['keyboard']
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        await hide_simple_loader(
            loader_id, 
            type('MockCallback', (), {
                'message': loader_message,
                'from_user': type('User', (), {'id': user_id})(),
                'bot': message.bot
            })(),
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_quantity_input")]
            ])
        )

@router.callback_query(F.data == "cancel_quantity_input")
async def cancel_quantity_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    user_id = callback.from_user.id
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    try:
        await message_manager.delete_user_message(callback.bot, user_id)
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    cancel_msg = await callback.message.answer(
        "‚ùå <b>–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ...",
        parse_mode='HTML'
    )
    
    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    import asyncio
    asyncio.create_task(delete_message_after_delay(callback.bot, callback.message.chat.id, cancel_msg.message_id, 2))
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É—è message_manager
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        keyboard = get_back_to_menu_keyboard()
    else:
        total = sum(item.price * item.quantity for item in cart_items)
        cart_text = f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        
        for item in cart_items:
            cart_text += f"üõçÔ∏è {item.name}\n"
            cart_text += f"üì¶ {item.quantity} —à—Ç. √ó {item.price}‚Çæ = {item.price * item.quantity}‚Çæ\n\n"
        
        cart_text += f"üí∞ –ò—Ç–æ–≥–æ: {total}‚Çæ"
        
        keyboard = get_cart_keyboard(cart_items)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_manager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await message_manager.send_or_edit_message(
        callback.bot, user_id,
        cart_text,
        reply_markup=keyboard,
        menu_state='cart',
        force_new=True  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    )


@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = callback.from_user.id
    await db.clear_cart(user_id)
    
    await message_manager.handle_callback_navigation(
        callback,
        "üóë <b>–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=_("common.to_catalog", user_id=user_id), callback_data="catalog")],
            [InlineKeyboardButton(text=_("common.main_menu", user_id=user_id), callback_data="back_to_menu")]
        ]),
        menu_state='cart_cleared'
    )