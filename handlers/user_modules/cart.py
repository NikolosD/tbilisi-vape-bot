from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import db
from keyboards import (
    get_cart_keyboard, get_product_card_keyboard, get_back_to_menu_keyboard
)
from message_manager import message_manager
from i18n import _
from button_filters import is_cart_button
from pages.manager import page_manager
from utils.formatters import format_product_card, format_cart_display

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def delete_message_after_delay(bot, chat_id, message_id, delay_seconds):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
    import asyncio
    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay_seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
    await asyncio.sleep(delay_seconds)
    try:
        logger.info(f"–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

logger = logging.getLogger(__name__)

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_cart_operations = {}

async def safe_cart_operation(user_id: int, callback: CallbackQuery, operation_func):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç race conditions"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_cart_operations:
        await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...", show_alert=False)
        return
    
    try:
        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞
        user_cart_operations[user_id] = True
        await operation_func()
    finally:
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        user_cart_operations.pop(user_id, None)

class CartStates(StatesGroup):
    waiting_cart_quantity_input = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(is_cart_button)
async def show_cart(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    print(f"üõí CART DEBUG: Handler called for text '{message.text}' from user {message.from_user.id}")
    try:
        await page_manager.cart.show_from_message(message)
        print(f"üõí CART DEBUG: show_from_message completed successfully")
    except Exception as e:
        print(f"üõí CART ERROR: {e}")
        import traceback
        traceback.print_exc()

@router.callback_query(F.data == "cart")
async def callback_cart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ callback"""
    await page_manager.cart.show_from_callback(callback)

@router.callback_query(F.data.startswith("cart_increase_"))
async def cart_increase(callback: CallbackQuery):
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    logger.info(f"üî• HANDLER: cart_increase - callback_data: {callback.data}")
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async def increase_operation():
        logger.info(f"cart_increase: product_id={product_id}, user_id={user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
        product = await db.get_product(product_id)
        if not product or not product.in_stock or product.stock_quantity <= 0:
            await callback.answer(_("error.product_unavailable", user_id=callback.from_user.id), show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_items = await db.get_cart(user_id)
        current_quantity = 0
        for item in cart_items:
            if item.product_id == product_id:
                current_quantity = item.quantity
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç —Å–∫–ª–∞–¥–∞
        if current_quantity >= product.stock_quantity:
            await callback.answer(
                _("error.max_quantity", user_id=callback.from_user.id, quantity=product.stock_quantity, current=current_quantity), 
                show_alert=True
            )
            return
        
        new_quantity = current_quantity + 1
        await db.update_cart_quantity(user_id, product_id, new_quantity)
        
        await callback.answer(_("cart.quantity_increased", quantity=new_quantity))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        message_text = callback.message.text or ""
        if "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:" in message_text:
            # –ú—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ - –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
            logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã...")
            cart_items = await db.get_cart(user_id)
            
            if not cart_items:
                await message_manager.handle_callback_navigation(
                    callback,
                    "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=_("common.to_catalog"), callback_data="catalog")],
                        [InlineKeyboardButton(text=_("common.main_menu"), callback_data="back_to_menu")]
                    ]),
                    menu_state='cart'
                )
            else:
                total = sum(item.quantity * item.price for item in cart_items)
                cart_text = f"{_('cart.title', user_id=user_id)}\n\n"
                for item in cart_items:
                    cart_text += _("cart.item", 
                                  name=item.name,
                                  quantity=item.quantity, 
                                  price=item.price,
                                  total=item.price * item.quantity,
                                  user_id=user_id)
                cart_text += _("cart.total", total=total, user_id=user_id)
                
                await message_manager.handle_callback_navigation(
                    callback,
                    cart_text,
                    reply_markup=get_cart_keyboard(cart_items),
                    menu_state='cart'
                )
        else:
            # –ú—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
            product = await db.get_product(product_id)
            if product:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                cart_items = await db.get_cart(user_id)
                quantity_in_cart = 0
                for item in cart_items:
                    if item.product_id == product_id:
                        quantity_in_cart = item.quantity
                        break
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                product_text = format_product_card(product, quantity_in_cart, user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –∫–Ω–æ–ø–æ–∫
                from_category = None
                for row in callback.message.reply_markup.inline_keyboard:
                    for button in row:
                        if button.callback_data and button.callback_data.startswith("category_"):
                            from_category = int(button.callback_data.split("_")[1])
                            break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                keyboard = get_product_card_keyboard(product_id, in_cart=True, from_category=from_category)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.edit_text(product_text, reply_markup=keyboard, parse_mode='HTML')
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                    try:
                        await callback.message.delete()
                    except Exception:
                        pass
                    await message_manager.send_or_edit_message(
                        callback.bot, user_id,
                        product_text,
                        reply_markup=keyboard,
                        menu_state='product_view',
                        force_new=True
                    )
    
    await safe_cart_operation(user_id, callback, increase_operation)

@router.callback_query(F.data.startswith("cart_decrease_"))
async def cart_decrease(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async def decrease_operation():
        logger.info(f"cart_decrease: product_id={product_id}, user_id={user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_items = await db.get_cart(user_id)
        current_quantity = 0
        for item in cart_items:
            if item.product_id == product_id:
                current_quantity = item.quantity
                break
        
        if current_quantity <= 1:
            await db.remove_from_cart(user_id, product_id)
            await callback.answer(_("cart.item_deleted"))
        else:
            new_quantity = current_quantity - 1
            await db.update_cart_quantity(user_id, product_id, new_quantity)
            await callback.answer(_("cart.quantity_decreased", quantity=new_quantity))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        message_text = callback.message.text or ""
        if "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:" in message_text:
            # –ú—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ - –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
            logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã...")
            cart_items = await db.get_cart(user_id)
            
            if not cart_items:
                await message_manager.handle_callback_navigation(
                    callback,
                    "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=_("common.to_catalog"), callback_data="catalog")],
                        [InlineKeyboardButton(text=_("common.main_menu"), callback_data="back_to_menu")]
                    ]),
                    menu_state='cart'
                )
            else:
                total = sum(item.quantity * item.price for item in cart_items)
                cart_text = f"{_('cart.title', user_id=user_id)}\n\n"
                for item in cart_items:
                    cart_text += _("cart.item", 
                                  name=item.name,
                                  quantity=item.quantity, 
                                  price=item.price,
                                  total=item.price * item.quantity,
                                  user_id=user_id)
                cart_text += _("cart.total", total=total, user_id=user_id)
                
                await message_manager.handle_callback_navigation(
                    callback,
                    cart_text,
                    reply_markup=get_cart_keyboard(cart_items),
                    menu_state='cart'
                )
        else:
            # –ú—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
            product = await db.get_product(product_id)
            if product:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                cart_items = await db.get_cart(user_id)
                quantity_in_cart = 0
                for item in cart_items:
                    if item.product_id == product_id:
                        quantity_in_cart = item.quantity
                        break
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
                product_text = format_product_card(product, quantity_in_cart, user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –∫–Ω–æ–ø–æ–∫
                from_category = None
                for row in callback.message.reply_markup.inline_keyboard:
                    for button in row:
                        if button.callback_data and button.callback_data.startswith("category_"):
                            from_category = int(button.callback_data.split("_")[1])
                            break
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                keyboard = get_product_card_keyboard(product_id, in_cart=(quantity_in_cart > 0), from_category=from_category)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.edit_text(product_text, reply_markup=keyboard, parse_mode='HTML')
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                    try:
                        await callback.message.delete()
                    except Exception:
                        pass
                    await message_manager.send_or_edit_message(
                        callback.bot, user_id,
                        product_text,
                        reply_markup=keyboard,
                        menu_state='product_view',
                        force_new=True
                    )
    
    await safe_cart_operation(user_id, callback, decrease_operation)

@router.callback_query(F.data.startswith("cart_remove_"))
async def cart_remove(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async def remove_operation():
        logger.info(f"cart_remove: product_id={product_id}, user_id={user_id}")
        
        product = await db.get_product(product_id)
        await db.remove_from_cart(user_id, product_id)
        
        await callback.answer(_("cart.item_removed"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã
        if "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:" in callback.message.text:
            logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã...")
            cart_items = await db.get_cart(user_id)
            
            if not cart_items:
                await message_manager.handle_callback_navigation(
                    callback,
                    "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=_("common.to_catalog"), callback_data="catalog")],
                        [InlineKeyboardButton(text=_("common.main_menu"), callback_data="back_to_menu")]
                    ]),
                    menu_state='cart'
                )
            else:
                total = sum(item.quantity * item.price for item in cart_items)
                cart_text = f"{_('cart.title', user_id=user_id)}\n\n"
                for item in cart_items:
                    cart_text += _("cart.item", 
                                  name=item.name,
                                  quantity=item.quantity, 
                                  price=item.price,
                                  total=item.price * item.quantity,
                                  user_id=user_id)
                cart_text += _("cart.total", total=total, user_id=user_id)
                
                await message_manager.handle_callback_navigation(
                    callback,
                    cart_text,
                    reply_markup=get_cart_keyboard(cart_items),
                    menu_state='cart'
                )
        else:
            # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
            original_data = callback.message.reply_markup.inline_keyboard
            from_category = None
            for row in original_data:
                for button in row:
                    if button.callback_data and button.callback_data.startswith("category_"):
                        from_category = int(button.callback_data.split("_")[1])
                        break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
            keyboard = get_product_card_keyboard(product_id, in_cart=False, from_category=from_category)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
    
    await safe_cart_operation(user_id, callback, remove_operation)

@router.callback_query(F.data.startswith("cart_input_qty_"))
async def cart_input_quantity(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = await db.get_product(product_id)
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_items = await db.get_cart(user_id)
    current_quantity = 0
    for item in cart_items:
        if item.product_id == product_id:
            current_quantity = item.quantity
            break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º product_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(cart_product_id=product_id, cart_current_quantity=current_quantity)
    await state.set_state(CartStates.waiting_cart_quantity_input)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await message_manager.handle_callback_navigation(
        callback,
        f"üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        f"üõçÔ∏è {product.name}\n"
        f"üì¶ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_quantity} —à—Ç.\n"
        f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {product.stock_quantity} —à—Ç.\n\n"
        f"üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ {product.stock_quantity}\n"
        f"(0 - —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_quantity_input")]
        ]),
        menu_state='quantity_input'
    )
    
    await callback.answer()

@router.message(CartStates.waiting_cart_quantity_input)
async def process_cart_quantity_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = message.from_user.id
    
    try:
        quantity = int(message.text)
    except ValueError:
        error_msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(last_error_msg_id=error_msg.message_id)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get('cart_product_id')
    current_quantity = data.get('cart_current_quantity', 0)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    last_error_msg_id = data.get('last_error_msg_id')
    if last_error_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=last_error_msg_id)
        except:
            pass
    
    if not product_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è
    product = await db.get_product(product_id)
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
    try:
        await message.delete()
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if quantity < 0:
        error_msg = await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(last_error_msg_id=error_msg.message_id)
        return
    
    if quantity > product.stock_quantity:
        error_msg = await message.answer(f"‚ùå –ù–∞ —Å–∫–ª–∞–¥–µ —Ç–æ–ª—å–∫–æ {product.stock_quantity} —à—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await state.update_data(last_error_msg_id=error_msg.message_id)
        return
    
    if quantity == 0:
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        await db.remove_from_cart(user_id, product_id)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await db.update_cart_quantity(user_id, product_id, quantity)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤–∫–ª—é—á–∞—è ID –æ—à–∏–±–∫–∏)
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    try:
        await message_manager.delete_user_message(message.bot, user_id)
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—Ö–µ
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        keyboard = get_back_to_menu_keyboard()
    else:
        total = sum(item.price * item.quantity for item in cart_items)
        cart_text = f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        
        for item in cart_items:
            cart_text += f"üõçÔ∏è {item.name}\n"
            cart_text += f"üì¶ {item.quantity} —à—Ç. √ó {item.price}‚Çæ = {item.price * item.quantity}‚Çæ\n\n"
        
        cart_text += f"üí∞ –ò—Ç–æ–≥–æ: {total}‚Çæ"
        
        keyboard = get_cart_keyboard(cart_items)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_manager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await message_manager.send_or_edit_message(
        message.bot, user_id,
        cart_text,
        reply_markup=keyboard,
        menu_state='cart',
        force_new=True  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    )

@router.callback_query(F.data == "cancel_quantity_input")
async def cancel_quantity_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    user_id = callback.from_user.id
    await state.clear()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    try:
        await message_manager.delete_user_message(callback.bot, user_id)
    except:
        pass
    
    await callback.answer("‚ùå –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É—è message_manager
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        keyboard = get_back_to_menu_keyboard()
    else:
        total = sum(item.price * item.quantity for item in cart_items)
        cart_text = f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        
        for item in cart_items:
            cart_text += f"üõçÔ∏è {item.name}\n"
            cart_text += f"üì¶ {item.quantity} —à—Ç. √ó {item.price}‚Çæ = {item.price * item.quantity}‚Çæ\n\n"
        
        cart_text += f"üí∞ –ò—Ç–æ–≥–æ: {total}‚Çæ"
        
        keyboard = get_cart_keyboard(cart_items)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_manager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await message_manager.send_or_edit_message(
        callback.bot, user_id,
        cart_text,
        reply_markup=keyboard,
        menu_state='cart',
        force_new=True  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    )

async def update_cart_display(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = callback.from_user.id
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        await message_manager.send_or_edit_message(
            callback.bot, user_id,
            "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=_("common.to_catalog"), callback_data="catalog")],
                [InlineKeyboardButton(text=_("common.main_menu"), callback_data="back_to_menu")]
            ]),
            menu_state='cart',
            force_new=True
        )
        return
    
    total = sum(item.quantity * item.price for item in cart_items)
    
    cart_text = f"{_('cart.title', user_id=user_id)}\n\n"
    for item in cart_items:
        cart_text += _("cart.item", 
                      name=item.name,
                      quantity=item.quantity, 
                      price=item.price,
                      total=item.price * item.quantity,
                      user_id=user_id)
    
    cart_text += _("cart.total", total=total, user_id=user_id)
    
    await message_manager.send_or_edit_message(
        callback.bot, user_id,
        cart_text,
        reply_markup=get_cart_keyboard(cart_items),
        menu_state='cart',
        force_new=True  # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    )

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = callback.from_user.id
    await db.clear_cart(user_id)
    
    await message_manager.handle_callback_navigation(
        callback,
        "üóë <b>–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=_("common.to_catalog", user_id=user_id), callback_data="catalog")],
            [InlineKeyboardButton(text=_("common.main_menu", user_id=user_id), callback_data="back_to_menu")]
        ]),
        menu_state='cart_cleared'
    )