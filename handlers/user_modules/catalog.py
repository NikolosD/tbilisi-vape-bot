from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import db
from keyboards import (
    get_product_card_keyboard, get_quantity_input_cancel_keyboard
)
from message_manager import message_manager
from i18n import _
from button_filters import is_catalog_button
from pages.manager import page_manager

logger = logging.getLogger(__name__)

router = Router()

class CatalogStates(StatesGroup):
    waiting_quantity_input = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(is_catalog_button)
async def show_catalog(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await page_manager.catalog.show_from_message(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data == "catalog")
async def callback_catalog(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ callback"""
    await page_manager.catalog.show_from_callback(callback)

@router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[1])
    await page_manager.catalog.show_from_callback(callback, category_id=category_id)

@router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞"""
    data_parts = callback.data.split("_")
    product_id = int(data_parts[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏  
    from_category = None
    if len(data_parts) > 3 and data_parts[2] == "from":
        from_category = int(data_parts[3])
    
    await page_manager.catalog.show_from_callback(callback, product_id=product_id, from_category=from_category)

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    product = await db.get_product(product_id)
    if not product or not product.in_stock or product.stock_quantity <= 0:
        await callback.answer(_("common.error"), show_alert=True)
        return
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    user = await db.get_user(user_id)
    if not user:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await db.add_user(
            user_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_items = await db.get_cart(user_id)
    current_quantity_in_cart = 0
    for item in cart_items:
        if item.product_id == product_id:
            current_quantity_in_cart = item.quantity
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç —Å–∫–ª–∞–¥–∞
    if current_quantity_in_cart >= product.stock_quantity:
        await callback.answer(
            _("error.max_quantity", user_id=callback.from_user.id, quantity=product.stock_quantity, current=current_quantity_in_cart), 
            show_alert=True
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    await db.add_to_cart(user_id, product_id, 1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    cart_items = await db.get_cart(user_id)
    quantity_in_cart = 0
    for item in cart_items:
        if item.product_id == product_id:
            quantity_in_cart = item.quantity
            break
    
    await callback.answer(_("cart.item_added"))
    
    # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ callback_data –µ—Å–ª–∏ –µ—Å—Ç—å
    original_data = callback.message.reply_markup.inline_keyboard
    from_category = None
    for row in original_data:
        for button in row:
            if button.callback_data and button.callback_data.startswith("category_"):
                from_category = int(button.callback_data.split("_")[1])
                break
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    product_text = f"üõçÔ∏è {product.name}\n\n"
    product_text += f"{product.description}\n\n"
    product_text += f"üí∞ –¶–µ–Ω–∞: {product.price}‚Çæ\n"
    product_text += f"üì¶ {'–í –Ω–∞–ª–∏—á–∏–∏' if product.in_stock else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
    if quantity_in_cart > 0:
        product_text += f"üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {quantity_in_cart} —à—Ç."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = get_product_card_keyboard(product_id, in_cart=True, from_category=from_category)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(product_text, reply_markup=keyboard, parse_mode='HTML')
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception:
            pass
        await message_manager.send_or_edit_message(
            callback.bot, user_id,
            product_text,
            reply_markup=keyboard,
            menu_state='product_view',
            force_new=True
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.callback_query(F.data.startswith("set_quantity_"))
async def set_quantity(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º from_category –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    from_category = None
    if callback.message.reply_markup:
        for row in callback.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data and button.callback_data.startswith("category_"):
                    from_category = int(button.callback_data.split("_")[1])
                    break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        product_id=product_id,
        original_message_id=callback.message.message_id,
        original_text=callback.message.text,
        original_markup=callback.message.reply_markup,
        from_category=from_category  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    quantity_message = await callback.message.edit_text(
        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999",
        reply_markup=get_quantity_input_cancel_keyboard(),
        parse_mode='HTML'
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º state —Å ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await state.update_data(quantity_message_id=quantity_message.message_id)
    
    await state.set_state(CatalogStates.waiting_quantity_input)

@router.callback_query(F.data.startswith("cancel_quantity_") & ~F.data.endswith("_input"))
async def cancel_quantity(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    product_id = int(callback.data.split("_")[2])
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    if 'original_text' in data and 'original_markup' in data:
        await callback.message.edit_text(
            data['original_text'],
            reply_markup=data['original_markup'],
            parse_mode='HTML'
        )
    
    await state.clear()
    await callback.answer("‚ùå –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω")

@router.message(CatalogStates.waiting_quantity_input)
async def process_quantity_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    user_id = message.from_user.id
    data = await state.get_data()
    product_id = data.get('product_id')
    
    if not product_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä")
        await state.clear()
        return
    
    try:
        quantity = int(message.text.strip())
        
        if quantity < 1 or quantity > 999:
            await message.answer(
                _("error.quantity_range", user_id=user_id),
                reply_markup=get_quantity_input_cancel_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
        product = await db.get_product(product_id)
        if not product or not product.in_stock:
            await message.answer(_("error.product_unavailable", user_id=user_id))
            await state.clear()
            return
        
        if quantity > product.stock_quantity:
            await message.answer(
                _("error.stock_limit", user_id=user_id, stock=product.stock_quantity),
                reply_markup=get_quantity_input_cancel_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        await db.update_cart_quantity(user_id, product_id, quantity)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity_message_id = data.get('quantity_message_id')
        if quantity_message_id:
            try:
                await message.bot.delete_message(chat_id=user_id, message_id=quantity_message_id)
            except Exception:
                pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = await db.get_cart(user_id)
        quantity_in_cart = 0
        for item in cart_items:
            if item.product_id == product_id:
                quantity_in_cart = item.quantity
                break
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
        product_text = f"üõçÔ∏è {product.name}\n\n"
        product_text += f"{product.description}\n\n"
        product_text += f"üí∞ –¶–µ–Ω–∞: {product.price}‚Çæ\n"
        product_text += f"üì¶ {'–í –Ω–∞–ª–∏—á–∏–∏' if product.in_stock else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
        if quantity_in_cart > 0:
            product_text += f"üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {quantity_in_cart} —à—Ç."
        
        # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        from_category = data.get('from_category')
        if not from_category and data.get('original_markup'):
            for row in data['original_markup'].inline_keyboard:
                for button in row:
                    if button.callback_data and button.callback_data.startswith("category_"):
                        from_category = int(button.callback_data.split("_")[1])
                        break
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        original_message_id = data.get('original_message_id')
        
        try:
            await message.bot.edit_message_text(
                chat_id=user_id,
                message_id=original_message_id,
                text=product_text,
                reply_markup=get_product_card_keyboard(product_id, in_cart=True, from_category=from_category),
                parse_mode='HTML'
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                product_text,
                reply_markup=get_product_card_keyboard(product_id, in_cart=True, from_category=from_category),
                parse_mode='HTML'
            )
        
        
    except ValueError:
        await message.answer(
            _("error.invalid_number", user_id=user_id),
            reply_markup=get_quantity_input_cancel_keyboard()
        )
        return
    
    await state.clear()

@router.callback_query(F.data == "cancel_quantity_input", CatalogStates.waiting_quantity_input)
async def cancel_quantity_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    user_id = callback.from_user.id
    data = await state.get_data()
    product_id = data.get('product_id')
    
    await state.clear()
    
    if not product_id:
        await callback.answer(_("error.product_not_found", user_id=user_id))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
    product = await db.get_product(product_id)
    if not product:
        await callback.answer(_("error.product_not_found", user_id=user_id))
        return
    
    cart_items = await db.get_cart(user_id)
    quantity_in_cart = 0
    for item in cart_items:
        if item.product_id == product_id:
            quantity_in_cart = item.quantity
            break
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
    product_text = f"üõçÔ∏è {product.name}\n\n"
    product_text += f"{product.description}\n\n"
    product_text += f"üí∞ {_('product.price', user_id=user_id)} {product.price}‚Çæ\n"
    product_text += f"üì¶ {_('product.in_stock', user_id=user_id) if product.in_stock else _('product.out_of_stock', user_id=user_id)}\n"
    if quantity_in_cart > 0:
        product_text += f"üõí {_('product.in_cart_quantity', user_id=user_id)} {quantity_in_cart} {_('product.pieces', user_id=user_id)}"
    
    # –ü–æ–ª—É—á–∞–µ–º from_category –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    from_category = data.get('from_category')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(
            product_text,
            reply_markup=get_product_card_keyboard(product_id, in_cart=(quantity_in_cart > 0), from_category=from_category),
            parse_mode='HTML'
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            product_text,
            reply_markup=get_product_card_keyboard(product_id, in_cart=(quantity_in_cart > 0), from_category=from_category),
            parse_mode='HTML'
        )
    
    await callback.answer(_("error.quantity_input_cancelled", user_id=user_id))