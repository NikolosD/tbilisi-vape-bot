from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import logging

from database import db
from keyboards import get_product_card_keyboard
from message_manager import message_manager
from i18n import _
from button_filters import is_catalog_button
from pages.manager import page_manager
from utils.formatters import format_product_card

logger = logging.getLogger(__name__)

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(is_catalog_button)
async def show_catalog(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print(f"üõç CATALOG DEBUG: Handler called for text '{message.text}' from user {message.from_user.id}")
    try:
        await page_manager.catalog.show_from_message(message)
        print(f"üõç CATALOG DEBUG: show_from_message completed successfully")
    except Exception as e:
        print(f"üõç CATALOG ERROR: {e}")
        import traceback
        traceback.print_exc()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data == "catalog")
async def callback_catalog(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ callback"""
    await page_manager.catalog.show_from_callback(callback)

@router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[1])
    await page_manager.catalog.show_from_callback(callback, category_id=category_id)

@router.callback_query(F.data == "catalog_brands")
async def callback_catalog_brands(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –±—Ä–µ–Ω–¥–∞–º"""
    await page_manager.catalog.show_from_callback(callback, catalog_type='brands')

@router.callback_query(F.data == "catalog_flavors")
async def callback_catalog_flavors(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –≤–∫—É—Å–∞–º"""
    await page_manager.catalog.show_from_callback(callback, catalog_type='flavors')

@router.callback_query(F.data.startswith("flavor_"))
async def show_flavor_products(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∫—É—Å–∞"""
    flavor_id = int(callback.data.split("_")[1])
    await page_manager.catalog.show_from_callback(callback, flavor_id=flavor_id)

@router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞"""
    data_parts = callback.data.split("_")
    product_id = int(data_parts[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤–∫—É—Å–∞  
    from_category = None
    if len(data_parts) > 3 and data_parts[2] == "from":
        if data_parts[3] == "flavor":
            # –ü—Ä–∏—à–ª–∏ –∏–∑ –≤–∫—É—Å–∞ - –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä
            from_category = None
        else:
            # –ü—Ä–∏—à–ª–∏ –∏–∑ –æ–±—ã—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            from_category = int(data_parts[3])
    
    await page_manager.catalog.show_from_callback(callback, product_id=product_id, from_category=from_category)





