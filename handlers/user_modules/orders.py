from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Contact, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import json

from database import db
from config import DELIVERY_ZONES, MIN_ORDER_AMOUNT, PAYMENT_INFO, ADMIN_IDS
from models import OrderStatus
from message_manager import message_manager
from keyboards import (
    get_order_confirmation_keyboard,
    get_order_details_keyboard, get_payment_notification_keyboard,
    get_admin_quick_actions_keyboard
)
from i18n import _
from button_filters import is_orders_button
from pages.manager import page_manager
from utils.loader import with_loader

logger = logging.getLogger(__name__)

router = Router()

class OrderStates(StatesGroup):
    waiting_contact = State()
    waiting_location = State()
    waiting_address = State()
    waiting_payment_screenshot = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(is_orders_button)
async def show_orders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await page_manager.orders.show_from_message(message)

@router.callback_query(F.data == "my_orders")
async def show_my_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await page_manager.orders.show_from_callback(callback)

@router.callback_query(F.data.startswith("orders_page_"))
async def orders_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    page = int(callback.data.split("_")[2])
    await page_manager.orders.show_from_callback(callback, page=page)

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_id = callback.from_user.id
    cart_items = await db.get_cart(user_id)
    
    if not cart_items:
        await callback.answer(_("cart.empty"), show_alert=True)
        return
    
    total = sum(item[1] * item[3] for item in cart_items)
    
    if total < MIN_ORDER_AMOUNT:
        await callback.answer(
            _("error.min_order_amount", user_id=callback.from_user.id, amount=MIN_ORDER_AMOUNT),
            show_alert=True
        )
        return
    
    # –£–¥–∞–ª—è–µ–º inline —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.delete()
    
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª checkout, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    combined_text = _("checkout.location_request", user_id=user_id).format(total=total)
    combined_text += "\n\nüîΩ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b>"
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –æ–ø—Ü–∏—è–º–∏
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="send_location_guide")],
        [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é", callback_data="manual_address")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="cart")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    location_request_msg = await callback.message.answer(
        combined_text,
        reply_markup=inline_keyboard,
        parse_mode='HTML'
    )
    
    await state.set_state(OrderStates.waiting_location)
    await state.update_data(total=total, location_request_msg_id=location_request_msg.message_id)
    
    print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_location –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@router.callback_query(F.data == "send_location_guide")
async def send_location_guide(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = callback.from_user.id
    
    guide_text = """üìç <b>–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:</b>

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª –∏–ª–∏ ¬´Location¬ª üåç
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ

<i>–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.</i>"""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await callback.message.edit_text(
        guide_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é", callback_data="manual_address")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="checkout")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]),
        parse_mode='HTML'
    )
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ waiting_location
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í–´–®–ï –¢–ï–ö–°–¢–û–í–û–ì–û!)
@router.message(OrderStates.waiting_location, F.location)
async def process_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    location = message.location
    
    current_state = await state.get_state()
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: lat={location.latitude}, lon={location.longitude}")
    print(f"DEBUG: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_state}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    data = await state.get_data()
    location_instruction_msg_id = data.get('location_instruction_msg_id')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if location_instruction_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=location_instruction_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    await state.update_data(
        latitude=location.latitude,
        longitude=location.longitude
    )
    
    location_msg = await message.answer(
        _("checkout.location_received", user_id=user_id).format(
            lat=location.latitude,
            lon=location.longitude
        ),
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='HTML'
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–æ—á–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    address_msg = await message.answer(
        _("checkout.enter_exact_address", user_id=user_id),
        parse_mode='HTML'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(
        location_msg_id=location_msg.message_id,
        address_msg_id=address_msg.message_id,
        location_map_msg_id=message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    )
    
    await state.set_state(OrderStates.waiting_address)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–∫–∏ manual_address
@router.callback_query(F.data == "manual_address")
async def manual_address(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é (inline –∫–Ω–æ–ø–∫–∞)"""
    user_id = callback.from_user.id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
    address_text = """üìù <b>–í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>

–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

<b>–ü—Ä–∏–º–µ—Ä:</b>
—É–ª. –†—É—Å—Ç–∞–≤–µ–ª–∏ 25, –∫–≤. 10

<i>–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞.</i>"""
    
    await callback.message.edit_text(
        address_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="checkout")],
            [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]),
        parse_mode='HTML'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(address_msg_id=callback.message.message_id)
    await state.set_state(OrderStates.waiting_address)
    await callback.answer()

@router.message(OrderStates.waiting_contact, F.content_type == 'contact')
async def process_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = message.contact
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await db.update_user_contact(user_id, contact.phone_number, "")
    
    data = await state.get_data()
    zone_id = data['delivery_zone']
    zone_info = DELIVERY_ZONES[zone_id]
    
    is_admin = user_id in ADMIN_IDS
    await message.answer(
        f"üìç <b>–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        f"üöö –ó–æ–Ω–∞: {zone_info['name']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {zone_info['price']}‚Çæ\n"
        f"‚è± –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {zone_info['time']}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_main_menu(is_admin=is_admin),
        parse_mode='HTML'
    )
    await state.set_state(OrderStates.waiting_address)

@router.message(OrderStates.waiting_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞"""
    address = message.text
    user_id = message.from_user.id
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å: {address} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –£–±–∏—Ä–∞–µ–º Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞
    loading_msg = await message.answer(
        "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑...",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='HTML'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –∏ –∑–∞–ø—Ä–æ—Å–æ–º –∞–¥—Ä–µ—Å–∞
    location_msg_id = data.get('location_msg_id')
    address_msg_id = data.get('address_msg_id')
    enter_address_msg_id = data.get('enter_address_msg_id')
    location_map_msg_id = data.get('location_map_msg_id')
    location_request_msg_id = data.get('location_request_msg_id')
    location_instruction_msg_id = data.get('location_instruction_msg_id')
    navigation_msg_id = data.get('navigation_msg_id')
    
    if location_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=location_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    if address_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=address_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    if enter_address_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=enter_address_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    if location_map_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=location_map_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    if location_request_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=location_request_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    if location_instruction_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=location_instruction_msg_id)
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    if navigation_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=navigation_msg_id)
        except Exception:
            pass  # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–¥—Ä–µ—Å–æ–º
    try:
        await message.delete()
    except Exception:
        pass
    
    # –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–¥–µ—Å—å - –æ–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∂–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—â–∞—è —Å—É–º–º–∞
    if 'total' not in data:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await loading_msg.delete()
        except Exception:
            pass
        
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        await state.clear()
        return
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–µ—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)
    latitude = data.get('latitude')
    longitude = data.get('longitude')
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è)
    delivery_price = 10  # 10‚Çæ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart_items = await db.get_cart(user_id)
    user = await db.get_user(user_id)
    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {cart_items}")
    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
    
    if not cart_items:
        logger.warning(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await loading_msg.delete()
        except Exception:
            pass
        
        await message.answer(
            "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        await state.clear()
        return
    
    if not user:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        user_lang = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        if message.from_user.language_code:
            if message.from_user.language_code.startswith('ka'):
                user_lang = 'ka'
            elif message.from_user.language_code.startswith('en'):
                user_lang = 'en'
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        await db.add_user(
            user_id, 
            message.from_user.username, 
            message.from_user.first_name,
            user_lang
        )
        user = await db.get_user(user_id)
        if not user:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            try:
                await loading_msg.delete()
            except Exception:
                pass
            
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            await state.clear()
            return
        
    phone = user.phone
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    items_total = sum(float(item.quantity * item.price) for item in cart_items)
    total_price = items_total + delivery_price
    
    logger.info(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: —Ç–æ–≤–∞—Ä—ã={items_total}, –¥–æ—Å—Ç–∞–≤–∫–∞={delivery_price}, –∏—Ç–æ–≥–æ={total_price}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    products_data = []
    for item in cart_items:
        products_data.append({
            'id': item.product_id,
            'name': item.name,
            'price': float(item.price),
            'quantity': item.quantity
        })
    
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞: {products_data}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –ª–æ–∞–¥–µ—Ä–æ–º
    async def create_order_operation():
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = await db.create_order(
            user_id=user_id,
            products=products_data,
            total_price=total_price,
            delivery_zone="custom",  # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—É—é –∑–æ–Ω—É
            delivery_price=delivery_price,
            phone=phone,
            address=address,
            latitude=latitude,
            longitude=longitude
        )
        logger.info(f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å –Ω–æ–º–µ—Ä–æ–º: {order_id}")
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await db.clear_cart(user_id)
        
        return order_id
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ª–æ–∞–¥–µ—Ä–æ–º
    try:
        order_id = await with_loader(
            create_order_operation,
            message.bot,
            loading_msg.chat.id,
            loading_msg.message_id,
            user_id=user_id,
            loader_text="–°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã...",
            success_text="üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞..."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    order_text = f"""‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!</b>

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for item in products_data:
        order_text += f"‚Ä¢ {item['name']} √ó {item['quantity']} = {item['price'] * item['quantity']}‚Çæ\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    delivery_info = "–ü–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"
    if latitude and longitude:
        delivery_info = f"–ü–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ({latitude:.6f}, {longitude:.6f})"
    
    order_text += f"""

üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_info} - {delivery_price}‚Çæ
üìç <b>–ê–¥—Ä–µ—Å:</b> {address}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}

üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ: {total_price}‚Çæ</b>

üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>
üè¶ –ë–∞–Ω–∫: {PAYMENT_INFO['bank_name']}
üí≥ –ö–∞—Ä—Ç–∞: {PAYMENT_INFO['card']}
üì± –°–ë–ü: {PAYMENT_INFO['sbp_phone']}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏–ª(–∞)" –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç."""
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–¥—Ä–µ—Å–æ–º
    try:
        await message.delete()
    except Exception:
        pass
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∞–¥—Ä–µ—Å–∞
    try:
        await message_manager.delete_user_message(message.bot, user_id)
    except Exception:
        pass
    
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∞–¥–µ—Ä–∞ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    try:
        await loading_msg.edit_text(
            order_text,
            reply_markup=get_order_confirmation_keyboard(order_id, user_id=user_id),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {e}")
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∞–¥–µ—Ä–∞
        try:
            await loading_msg.delete()
        except Exception:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_manager.send_or_edit_message(
            message.bot, user_id,
            order_text,
            reply_markup=get_order_confirmation_keyboard(order_id, user_id=user_id),
            menu_state='order_created',
            force_new=True
        )
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        message_manager.set_user_message(user_id, loading_msg.message_id, 'order_created')
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã
    
    await state.clear()

@router.callback_query(F.data.startswith("payment_done_"))
async def payment_done(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ"""
    order_id = int(callback.data.split("_")[2])
    
    await state.update_data(order_id=order_id)
    
    await callback.message.edit_text(
        f"üì∏ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
        parse_mode='HTML'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    user_id = callback.from_user.id
    message_manager.set_user_message(user_id, callback.message.message_id, 'waiting_screenshot')
    
    await state.set_state(OrderStates.waiting_payment_screenshot)

@router.message(OrderStates.waiting_payment_screenshot, F.content_type == 'photo')
async def process_payment_screenshot(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    order_id = data['order_id']
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    order = await db.get_order_by_number(order_id)
    if order and order.payment_screenshot:
        # –°–∫—Ä–∏–Ω—à–æ—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –Ω–æ–≤—ã–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        try:
            await message.delete()
        except:
            pass
        
        warning_msg = await message.answer(
            f"‚ö†Ô∏è <b>–°–∫—Ä–∏–Ω—à–æ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üì∏ –ó–∞–∫–∞–∑ #{order_id}\n\n"
            f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode='HTML'
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        import asyncio
        from handlers.user_modules.cart import delete_message_after_delay
        asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, warning_msg.message_id, 5))
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    photo_file_id = message.photo[-1].file_id
    await db.update_order_screenshot_by_number(order_id, photo_file_id)
    await db.update_order_status_by_number(order_id, 'payment_check')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
    try:
        await message.delete()
    except Exception:
        pass
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞—Å–æ—Ä–µ–Ω–∏–µ —á–∞—Ç–∞
    user_id = message.from_user.id
    try:
        await message_manager.delete_all_user_messages(message.bot, user_id)
    except Exception:
        pass
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message_manager.send_or_edit_message(
        message.bot, user_id,
        f"‚úÖ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
        f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]),
        menu_state='screenshot_confirmed',
        force_new=True
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    from config import ADMIN_IDS, DELIVERY_ZONES
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã ADMIN_IDS –∏–∑ config: {ADMIN_IDS}")
    logger.info(f"–¢–∏–ø ADMIN_IDS: {type(ADMIN_IDS)}")
    
    logger.info(f"–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ {order_id} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤")
    order = await db.get_order_by_number(order_id)
    
    if not order:
        logger.error(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    logger.info(f"–ó–∞–∫–∞–∑ {order_id} –Ω–∞–π–¥–µ–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
    logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–∫–∞–∑–∞: {order}")
    
    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã  
    products = order.products_data
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await db.get_user(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∑–∞–∫–∞–∑–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    latitude = getattr(order, 'latitude', None)
    longitude = getattr(order, 'longitude', None)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    admin_lang = 'ru'  # –Ø–∑—ã–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    admin_text = f"""{_("admin_notifications.new_order", user_id=617646449).format(order_number=order.order_number)}

{_("admin_notifications.user", user_id=617646449)} {message.from_user.first_name or _("admin_notifications.unknown", user_id=617646449)} (@{message.from_user.username or _("admin_notifications.no_username", user_id=617646449)})
{_("admin_notifications.amount", user_id=617646449)} {order.total_price}‚Çæ
{_("admin_notifications.address", user_id=617646449)} {order.address}
"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if latitude and longitude:
        admin_text += f"{_('admin_notifications.coordinates', user_id=617646449)} {latitude:.6f}, {longitude:.6f}\n"
    
    admin_text += f"\n{_('admin_notifications.order_content', user_id=617646449)}\n"
    
    for product in products:
        admin_text += f"‚Ä¢ {product['name']} √ó {product['quantity']} = {product['price'] * product['quantity']}‚Çæ\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ —Å —É—á–µ—Ç–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    if order.delivery_zone == "custom":
        delivery_info = _("admin_notifications.by_coordinates", user_id=617646449)
        if latitude and longitude:
            delivery_info = f"{_('admin_notifications.by_coordinates', user_id=617646449)} ({latitude:.6f}, {longitude:.6f})"
    else:
        zone_info = DELIVERY_ZONES.get(order.delivery_zone, {'name': _("admin_notifications.unknown", user_id=617646449)})
        delivery_info = zone_info['name']
    
    admin_text += f"""
{_("admin_notifications.delivery", user_id=617646449)} {delivery_info} - {order.delivery_price}‚Çæ
{_("admin_notifications.phone", user_id=617646449)} {order.phone}
{_("admin_notifications.order_date", user_id=617646449)} {str(order.created_at)[:16]}

{_("admin_notifications.payment_screenshot", user_id=617646449)}
{_("admin_notifications.awaiting_verification", user_id=617646449)}"""
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º. ADMIN_IDS: {ADMIN_IDS}")
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}")
    
    if not ADMIN_IDS:
        logger.error("ADMIN_IDS –ø—É—Å—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS")
        return
    
    for admin_id in ADMIN_IDS:
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}")
            await message.bot.send_photo(
                admin_id,
                photo=photo_file_id,
                caption=admin_text,
                reply_markup=get_admin_quick_actions_keyboard(order.id, 'payment_check'),
                parse_mode='HTML'
            )
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
    
    await state.clear()

@router.message(OrderStates.waiting_payment_screenshot)
async def reject_non_screenshot(message: Message, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫—Ä–æ–º–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    user_id = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
    try:
        await message.delete()
    except:
        pass
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    order_id = data.get('order_id', 'N/A')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    warning_msg = await message.answer(
        f"‚ö†Ô∏è <b>–ù—É–∂–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã!</b>\n\n"
        f"üì∏ –ó–∞–∫–∞–∑ #{order_id}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–º–µ–Ω–Ω–æ <b>–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b> (—Å–∫—Ä–∏–Ω—à–æ—Ç) —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã.\n\n"
        f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé ‚Üí –§–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç",
        parse_mode='HTML'
    )
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    import asyncio
    from handlers.user_modules.cart import delete_message_after_delay
    asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, warning_msg.message_id, 5))

@router.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    order_number = int(callback.data.split("_")[2])  # –≠—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –Ω–µ ID
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    order = await db.get_order_by_number(order_number)
    if not order or order.user_id != user_id:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å (—Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—É)
    if order.status not in [OrderStatus.WAITING_PAYMENT.value, OrderStatus.PAYMENT_CHECK.value]:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å", show_alert=True)
        return
    
    # –¢–æ–≤–∞—Ä—ã –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    # –°–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
    await db.update_order_status(order.id, 'cancelled')
    
    # Popup —É–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∏–∂–µ
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message_manager.handle_callback_navigation(
        callback,
        "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        f"–ó–∞–∫–∞–∑ #{order.order_number} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]),
        menu_state='order_cancelled'
    )

@router.callback_query(F.data.startswith("order_"))
async def show_order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[1])
    order = await db.get_order(order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = order.products_data
    
    status_text = {
        'waiting_payment': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'payment_check': 'üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã',
        'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω, –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
        'shipping': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    }
    
    order_text = f"""üìã <b>–ó–∞–∫–∞–∑ #{order.order_number}</b>

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for product in products:
        order_text += f"‚Ä¢ {product['name']} √ó {product['quantity']} = {product['price'] * product['quantity']}‚Çæ\n"
    
    zone_info = DELIVERY_ZONES.get(order.delivery_zone, {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
    
    order_text += f"""

üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {zone_info['name']} - {order.delivery_price}‚Çæ
üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}
üìÖ <b>–î–∞—Ç–∞:</b> {str(order.created_at)[:16]}

üí∞ <b>–ò—Ç–æ–≥–æ: {order.total_price}‚Çæ</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text.get(order.status, order.status)}"""
    
    await callback.message.edit_text(
        order_text,
        reply_markup=get_order_details_keyboard(order_id, order.status),
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("resend_screenshot_"))
async def resend_screenshot(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã"""
    order_number = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    order = await db.get_order_by_number(order_number)
    if not order or order.user_id != user_id:
        await callback.answer(_("error.order_not_found", user_id=user_id), show_alert=True)
        return
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π
    await db.update_order_screenshot(order.id, None)
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message_manager.delete_all_user_messages(callback.bot, user_id)
    except Exception:
        pass
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_id=order_number)
    await state.set_state(OrderStates.waiting_payment_screenshot)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    await callback.message.edit_text(
        f"üì∏ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞</b>\n\n"
        f"üìã –ó–∞–∫–∞–∑ #{order_number}\n"
        f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {order.total_price}‚Çæ\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=_("common.cancel", user_id=user_id), callback_data="my_orders")]
        ]),
        parse_mode='HTML'
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_location - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω—ã–π –∞–¥—Ä–µ—Å
@router.message(OrderStates.waiting_location)
async def handle_text_in_waiting_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∞–¥—Ä–µ—Å"""
    user_id = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    hint_msg = await message.answer(
        "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.",
        parse_mode='HTML'
    )
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    import asyncio
    from handlers.user_modules.cart import delete_message_after_delay
    asyncio.create_task(delete_message_after_delay(message.bot, message.chat.id, hint_msg.message_id, 3))