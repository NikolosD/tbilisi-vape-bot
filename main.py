import asyncio
import logging
import signal
import sys
import subprocess
import os

try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    logging.warning("‚ö†Ô∏è psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web, ClientSession
import os

from config import BOT_TOKEN, ADMIN_IDS
from database import db, init_db
from keyboards import get_main_menu, get_main_menu_inline
from handlers.user import router as user_router
from handlers.admin import admin_router
from admin_management import router as admin_management_router
from i18n import _
from middleware import AntiSpamMiddleware
from anti_spam import anti_spam

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º—ã
anti_spam.set_admin_ids(ADMIN_IDS)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
dp.message.middleware(AntiSpamMiddleware())
dp.callback_query.middleware(AntiSpamMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(user_router)
dp.include_router(admin_management_router)  # –í–∞–∂–Ω–æ: –ø–æ–¥–∫–ª—é—á–∞–µ–º –î–û admin_router
dp.include_router(admin_router)

# ReplyKeyboard —É–±—Ä–∞–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ inline –∫–Ω–æ–ø–∫–∏

@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.add_user(user_id, username, first_name)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    from i18n import i18n
    if user_id not in i18n.user_languages:
        i18n.set_language('ru', user_id)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    from message_manager import message_manager
    await message_manager.delete_user_message(message.bot, user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = user_id in ADMIN_IDS
    
    welcome_text = f"""{_('welcome.title', user_id=user_id)}

{_('welcome.description', user_id=user_id)}

{_('common.select_action', user_id=user_id)}"""
    
    sent_message = await message.answer(
        welcome_text,
        reply_markup=get_main_menu_inline(is_admin=is_admin, user_id=user_id),
        parse_mode='HTML'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_manager.set_user_message(user_id, sent_message.message_id, 'main')

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    user = await db.get_user(user_id)
    if not user:
        await db.add_user(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )
    
    from keyboards import get_enhanced_admin_keyboard
    await message.answer(
        "üîß <b>–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_enhanced_admin_keyboard(user_id=user_id),
        parse_mode='HTML'
    )

@dp.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    user = await db.get_user(user_id)
    if not user:
        await db.add_user(
            user_id, 
            message.from_user.username, 
            message.from_user.first_name
        )
    
    from keyboards import get_enhanced_admin_keyboard
    await message.answer(
        "üîß <b>–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_enhanced_admin_keyboard(user_id=user_id),
        parse_mode='HTML'
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """üìñ <b>–ü–æ–º–æ—â—å</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–º–æ—â—å
/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑
4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
7Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç
8Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–∞–≤–∫–∏

<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
üì± –°–ë–ü (–±—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏)
üí∞ –ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ (–≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–æ–Ω–∞—Ö)

<b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>
üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑—å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""

    await message.answer(help_text, parse_mode='HTML')

# –¢–ï–°–¢–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ main.py (–í–†–ï–ú–ï–ù–ù–û)
@dp.message()
async def debug_all_messages(message: Message, state: FSMContext):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    from config import ADMIN_IDS
    
    # ReplyKeyboard –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –≤—Å–µ –∫–Ω–æ–ø–∫–∏ inline
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞
    if message.from_user.id in ADMIN_IDS:
        current_state = await state.get_state()
        data = await state.get_data()
        print(f"üåê GLOBAL DEBUG: Unhandled admin message from {message.from_user.id}")
        print(f"    Text: '{message.text}'")
        print(f"    State: {current_state}")
        print(f"    Data: {data}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ communication.py
        if current_state and 'waiting_broadcast_message' in str(current_state):
            print(f"üöÄ BEAUTIFUL BROADCAST: Processing broadcast with branding!")
            
            from handlers.admin.communication import process_broadcast_logic
            await process_broadcast_logic(message, state)
            return

def kill_other_bot_instances():
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞"""
    if not PSUTIL_AVAILABLE:
        logger.warning("‚ö†Ô∏è psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
        try:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è Render.com –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            if sys.platform == "darwin" or sys.platform.startswith("linux"):
                # –ò—â–µ–º –≤—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã —Å main.py
                result = subprocess.run(
                    ["pgrep", "-f", "python.*main.py"], 
                    capture_output=True, 
                    text=True
                )
                if result.stdout:
                    pids = result.stdout.strip().split('\n')
                    current_pid = str(os.getpid())
                    killed_count = 0
                    
                    for pid in pids:
                        if pid and pid != current_pid:
                            logger.info(f"üî™ –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (PID: {pid})")
                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                            subprocess.run(["kill", "-TERM", pid], capture_output=True)
                            killed_count += 1
                    
                    if killed_count > 0:
                        logger.info(f"‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {killed_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
                        import time
                        time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
                        result2 = subprocess.run(
                            ["pgrep", "-f", "python.*main.py"], 
                            capture_output=True, 
                            text=True
                        )
                        if result2.stdout:
                            remaining_pids = [p for p in result2.stdout.strip().split('\n') if p and p != current_pid]
                            if remaining_pids:
                                logger.warning(f"üî¥ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã: {remaining_pids}")
                                for pid in remaining_pids:
                                    subprocess.run(["kill", "-KILL", pid], capture_output=True)
                                time.sleep(2)
                        
                        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                    else:
                        logger.info("‚úÖ –î—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    logger.info("‚úÖ –î—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                logger.info("üí° –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã: {e}")
            # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫
        return
    
    current_pid = os.getpid()
    killed_count = 0
    
    try:
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python
                if proc.info['name'] and 'python' in proc.info['name'].lower():
                    cmdline = proc.info['cmdline']
                    if cmdline and len(cmdline) > 1:
                        # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –∑–∞–ø—É—Å–∫–∞—é—â–∏–µ main.py —ç—Ç–æ–≥–æ –±–æ—Ç–∞
                        if 'main.py' in ' '.join(cmdline) and proc.info['pid'] != current_pid:
                            logger.info(f"üî™ –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (PID: {proc.info['pid']})")
                            proc.terminate()
                            killed_count += 1
                            
                            # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                            try:
                                proc.wait(timeout=2)
                            except psutil.TimeoutExpired:
                                proc.kill()
                                logger.info(f"üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                                
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    if killed_count > 0:
        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {killed_count} —Å—Ç–∞—Ä—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞")
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        import time
        time.sleep(3)
    else:
        logger.info("‚úÖ –î—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

async def health_check(request):
    """Health check endpoint –¥–ª—è Render"""
    return web.Response(text="Bot is running!")

async def shutdown_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
    try:
        await db.close_pool()
    except:
        pass
    try:
        await bot.session.close()
    except:
        pass
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for sig in (signal.SIGTERM, signal.SIGINT):
        signal.signal(sig, lambda s, f: asyncio.create_task(shutdown_handler()))
    
    try:
        logger.info("üî• –ó–∞–ø—É—Å–∫ Tbilisi VAPE Shop Bot...")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞
        logger.info("üîç –ü–æ–∏—Å–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞...")
        kill_other_bot_instances()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...")
        db_admins = await db.get_all_admins()
        for admin in db_admins:
            admin_id = admin[0]
            if admin_id not in ADMIN_IDS:
                ADMIN_IDS.append(admin_id)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω –∏–∑ –ë–î: {admin_id}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        from i18n import i18n
        await i18n.load_user_languages_from_db()
        
        # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –∏ –∂–¥–µ–º
        logger.info("–û—á–∏—Å—Ç–∫–∞ webhook...")
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–∞ Render.com
        logger.info("‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        await asyncio.sleep(5)
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render
        if os.getenv('RENDER'):
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Render...")
            app = web.Application()
            app.router.add_get('/', health_check)
            app.router.add_get('/health', health_check)
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(dp.start_polling(bot, drop_pending_updates=True))
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            port = int(os.getenv('PORT', 10000))
            logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            await web._run_app(app, host='0.0.0.0', port=port)
        else:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
            await dp.start_polling(bot, drop_pending_updates=True)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        await shutdown_handler()

if __name__ == "__main__":
    asyncio.run(main())