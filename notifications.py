"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∑–∞–∫–∞–∑–æ–≤
"""
import asyncio
import logging
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from typing import Dict, Any

logger = logging.getLogger(__name__)

class OrderNotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self._status_emojis = {
            'waiting_payment': '‚è≥',
            'payment_check': 'üí∞',
            'paid': '‚úÖ',
            'shipping': 'üöö',
            'delivered': 'üì¶',
            'cancelled': '‚ùå'
        }
        self._status_texts = {
            'waiting_payment': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
            'payment_check': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã',
            'paid': '–û–ø–ª–∞—á–µ–Ω –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
            'shipping': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        }
    
    async def notify_status_change(self, order_id: int, old_status: str, new_status: str):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            order = await db.get_order(order_id)
            if not order:
                return
            
            # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞
            if old_status == new_status:
                return
            
            status_emoji = self._status_emojis.get(new_status, '‚ùì')
            status_text = self._status_texts.get(new_status, new_status)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if new_status == 'payment_check':
                message_text = f"""üìã <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order.order_number}</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:</b> {status_text}

–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
                
            elif new_status == 'paid':
                message_text = f"""üìã <b>–ó–∞–∫–∞–∑ #{order.order_number} –æ–ø–ª–∞—á–µ–Ω!</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."""
                
            elif new_status == 'shipping':
                message_text = f"""üìã <b>–ó–∞–∫–∞–∑ #{order.order_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–∂–µ –≤ –ø—É—Ç–∏. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É."""
                
            elif new_status == 'delivered':
                message_text = f"""üìã <b>–ó–∞–∫–∞–∑ #{order.order_number} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ù–∞–¥–µ–µ–º—Å—è, –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º. 

–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! ‚ù§Ô∏è"""
                
            elif new_status == 'cancelled':
                message_text = f"""üìã <b>–ó–∞–∫–∞–∑ #{order.order_number} –æ—Ç–º–µ–Ω–µ–Ω</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ."""
                
            else:
                message_text = f"""üìã <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order.order_number}</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:</b> {status_text}"""
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_{order.id}")],
                [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")]
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if new_status == 'delivered':
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑
                keyboard.inline_keyboard.insert(-1, [
                    InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"repeat_order_{order.id}")
                ])
            elif new_status == 'cancelled':
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
                keyboard.inline_keyboard.insert(-1, [
                    InlineKeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="catalog")
                ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=order.user_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {order.user_id} –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order.order_number}: {old_status} -> {new_status}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
    
    async def notify_reservation_expiring(self, order_id: int, minutes_left: int):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            order = await db.get_order(order_id)
            if not order or order.status != 'waiting_payment':
                return
            
            if minutes_left <= 2:  # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                message_text = f"""‚ö†Ô∏è <b>–†–µ–∑–µ—Ä–≤ —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å—Ç–µ–∫–∞–µ—Ç!</b>

üìã <b>–ó–∞–∫–∞–∑:</b> #{order.order_number}
‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {minutes_left} –º–∏–Ω

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã."""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"resend_screenshot_{order.order_number}")],
                    [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_{order.id}")]
                ])
                
                await self.bot.send_message(
                    chat_id=order.user_id,
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {order.user_id} –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞ –∑–∞–∫–∞–∑–∞ #{order.order_number}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_system = None

def init_notification_system(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_system
    notification_system = OrderNotificationSystem(bot)
    return notification_system