"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

from typing import Dict, Any, Optional
from datetime import datetime, timezone
from .base import BasePage
from database import db
from keyboards import get_orders_keyboard, get_order_details_keyboard
from models import OrderStatus
from components.pagination import pagination
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from i18n import _


class OrdersPage(BasePage):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º"""
    
    def __init__(self):
        super().__init__('orders')
    
    async def render(self, user_id: int, **kwargs) -> Dict[str, Any]:
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤"""
        order_id = kwargs.get('order_id')
        page = kwargs.get('page', 1)
        status_filter = kwargs.get('status_filter', 'all')
        search_query = kwargs.get('search_query')
        
        if order_id:
            return await self._render_order_details(user_id, order_id)
        else:
            return await self._render_orders_list(user_id, page, status_filter, search_query)
    
    async def _render_orders_list(self, user_id: int, page: int = 1, status_filter: str = 'all', search_query: Optional[str] = None) -> Dict[str, Any]:
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
        stats = await db.get_user_orders_stats(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        orders = await db.get_user_orders(user_id, status_filter, search_query)
        
        if not orders and not search_query:
            from keyboards import get_back_to_menu_keyboard
            return {
                'text': f"üìã <b>{self.get_title(user_id)}</b>\n\n{self.get_empty_message(user_id)}",
                'keyboard': get_back_to_menu_keyboard(user_id=user_id)
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        text = f"üìã <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ
        if search_query:
            text += f"üîç –ü–æ–∏—Å–∫: <i>{search_query}</i>\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if not search_query:
            text += f"üìä –í—Å–µ–≥–æ: {stats['total']} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']} | –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']} | –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['cancelled']}\n"
        
        text += "\n"
        
        if not orders:
            text += "‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_info = pagination.paginate(orders, page)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            if pagination_info.get('total_pages', 1) > 1:
                text += pagination.get_page_info_text(pagination_info, user_id)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for order in pagination_info.get('items', orders):
                text += await self._format_order_preview(order, user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await self._create_orders_keyboard(orders, page, status_filter, search_query, stats, user_id)
        
        return {
            'text': text,
            'keyboard': keyboard
        }
    
    async def _render_order_details(self, user_id: int, order_id: int) -> Dict[str, Any]:
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
        order = await db.get_order(order_id)
        if not order or order.user_id != user_id:
            return await self._render_orders_list(user_id)
        
        status_emoji = self._get_status_emoji(order.status)
        status_text = self._get_status_text(order.status, user_id)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        text = f"üßæ <b>–ó–∞–∫–∞–∑ #{order.order_number}</b>\n\n"
        
        # –°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        status_indicator = "üü¢" if order.status in ['paid', 'shipping', 'delivered'] else "üü°" if order.status in ['waiting_payment', 'payment_check'] else "üî¥"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_indicator} {status_text}\n"
        
        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ì—Ä—É–∑–∏–∏ (GMT+4)
        from datetime import timezone, timedelta
        tbilisi_tz = timezone(timedelta(hours=4))
        order_time = order.created_at.replace(tzinfo=timezone.utc).astimezone(tbilisi_tz)
        created_time = order_time.strftime('%d.%m.%Y –≤ %H:%M')
        text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {created_time}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
        if order.status == 'waiting_payment':
            reservation = await db.get_order_reservation(order.id)
            if reservation:
                if reservation['minutes_left'] > 0:
                    text += f"‚è∞ <b>–†–µ–∑–µ—Ä–≤ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:</b> {reservation['minutes_left']} –º–∏–Ω\n"
                else:
                    text += f"‚ö†Ô∏è <b>–†–µ–∑–µ—Ä–≤ —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å—Ç–µ–∫</b>\n"
            text += "\n"
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if order.phone:
            text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}\n"
        if order.address:
            text += f"üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order.address}\n"
        if order.latitude and order.longitude:
            text += f"üó∫Ô∏è <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {order.latitude:.6f}, {order.longitude:.6f}\n"
        text += "\n"
        
        # –¢–æ–≤–∞—Ä—ã
        text += f"üì¶ <b>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</b>\n"
        products = order.products_data
        items_total = 0
        for i, product in enumerate(products, 1):
            item_cost = product['price'] * product['quantity']
            items_total += item_cost
            text += f"{i}. {product['name']}\n"
            text += f"   ‚îî‚îÄ {product['quantity']} —à—Ç √ó {product['price']}‚Çæ = {item_cost}‚Çæ\n\n"
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        text += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤:</b> {items_total}‚Çæ\n"
        text += f"üöö <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order.delivery_price}‚Çæ\n"
        text += f"üí≥ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {order.total_price}‚Çæ\n"
        
        return {
            'text': text,
            'keyboard': await self._create_order_details_keyboard(order, user_id)
        }
    
    async def _create_order_details_keyboard(self, order, user_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞"""
        keyboard = []
        
        # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if order.status == 'waiting_payment':
            keyboard.append([
                InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"resend_screenshot_{order.order_number}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order.id}")
            ])
        elif order.status == 'payment_check':
            keyboard.append([
                InlineKeyboardButton(text="üì∏ –û–±–Ω–æ–≤–∏—Ç—å —á–µ–∫", callback_data=f"resend_screenshot_{order.order_number}")
            ])
        elif order.status == 'delivered':
            keyboard.append([
                InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"repeat_order_{order.id}")
            ])
        
        # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        keyboard.append([
            InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data=f"support_order_{order.id}")
        ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="my_orders"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"order_{order.id}")
        ])
        
        keyboard.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def _get_status_emoji(self, status) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º status –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        if hasattr(status, 'value'):
            status_str = status.value
        else:
            status_str = status
            
        status_emojis = {
            "waiting_payment": "‚è≥",
            "payment_check": "üí∞",
            "paid": "‚úÖ",
            "shipping": "üöö",
            "delivered": "üì¶",
            "cancelled": "‚ùå"
        }
        return status_emojis.get(status_str, "‚ùì")
    
    def _get_status_text(self, status, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        # status –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫–æ–π, —Ç–∞–∫ –∏ enum, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Å–ª—É—á–∞—è
        if hasattr(status, 'value'):
            status_value = status.value
        else:
            status_value = status
        return _(f"orders.status_{status_value}", user_id=user_id)
    
    async def _format_order_preview(self, order, user_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –∑–∞–∫–∞–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        status_emoji = self._get_status_emoji(order.status)
        status_text = self._get_status_text(order.status, user_id)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ì—Ä—É–∑–∏–∏ (GMT+4)
        from datetime import timezone, timedelta
        tbilisi_tz = timezone(timedelta(hours=4))
        order_time = order.created_at.replace(tzinfo=timezone.utc).astimezone(tbilisi_tz)
        created_time = order_time.strftime('%d.%m.%Y %H:%M')
        
        text = f"‚îå‚îÄ {status_emoji} <b>‚Ññ{order.order_number}</b> ‚îÄ {status_text}\n"
        text += f"‚îÇ üìÖ {created_time}\n"
        text += f"‚îÇ üí∞ {order.total_price}‚Çæ\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        if order.status == 'waiting_payment':
            reservation = await db.get_order_reservation(order.id)
            if reservation and reservation['minutes_left'] > 0:
                text += f"‚îÇ ‚è∞ –†–µ–∑–µ—Ä–≤: {reservation['minutes_left']} –º–∏–Ω\n"
            else:
                text += f"‚îÇ ‚ö†Ô∏è –†–µ–∑–µ—Ä–≤ –∏—Å—Ç–µ–∫\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–æ–≤ (–ø–µ—Ä–≤—ã–µ 2)
        products = order.products_data
        if products:
            text += f"‚îÇ üì¶ "
            preview_items = products[:2]
            for i, product in enumerate(preview_items):
                if i > 0:
                    text += ", "
                text += f"{product['name']} x{product['quantity']}"
            if len(products) > 2:
                text += f" –∏ –µ—â–µ {len(products) - 2}"
            text += "\n"
        
        text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        return text
    
    async def _create_orders_keyboard(self, orders, page: int, status_filter: str, search_query: Optional[str], stats: dict, user_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∏—Å–∫–∞)
        if not search_query:
            filter_row1 = []
            filter_row2 = []
            
            # –í—Å–µ –∑–∞–∫–∞–∑—ã
            button_text = f"üóÇÔ∏è –í—Å–µ ({stats['total']})"
            if status_filter == 'all':
                button_text = f"‚úÖ {button_text}"
            filter_row1.append(InlineKeyboardButton(text=button_text, callback_data="orders_filter_all"))
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            button_text = f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ ({stats['active']})"
            if status_filter == 'active':
                button_text = f"‚úÖ {button_text}"
            filter_row1.append(InlineKeyboardButton(text=button_text, callback_data="orders_filter_active"))
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            button_text = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ({stats['completed']})"
            if status_filter == 'completed':
                button_text = f"‚úÖ {button_text}"
            filter_row2.append(InlineKeyboardButton(text=button_text, callback_data="orders_filter_completed"))
            
            # –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            button_text = f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ ({stats['cancelled']})"
            if status_filter == 'cancelled':
                button_text = f"‚úÖ {button_text}"
            filter_row2.append(InlineKeyboardButton(text=button_text, callback_data="orders_filter_cancelled"))
            
            keyboard.append(filter_row1)
            keyboard.append(filter_row2)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        search_text = "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É" if not search_query else "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫"
        search_callback = "orders_search" if not search_query else "orders_filter_all"
        keyboard.append([InlineKeyboardButton(text=search_text, callback_data=search_callback)])
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if orders:
            keyboard.append([InlineKeyboardButton(text="‚îÄ‚îÄ‚îÄ –ó–∞–∫–∞–∑—ã ‚îÄ‚îÄ‚îÄ", callback_data="noop")])
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        if orders:
            pagination_info = pagination.paginate(orders, page)
            
            # –ö–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–æ–≤
            for order in pagination_info['items']:
                status_emoji = self._get_status_emoji(order.status)
                button_text = f"{status_emoji} ‚Ññ{order.order_number} - {order.total_price}‚Çæ"
                keyboard.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"order_{order.id}"
                )])
            
            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if pagination_info.get('total_pages', 1) > 1:
                pagination_row = []
                if pagination_info.get('has_prev', False):
                    prev_page = pagination_info.get('page', 1) - 1
                    callback_data = f"orders_page_{prev_page}"
                    if status_filter != 'all':
                        callback_data += f"_{status_filter}"
                    if search_query:
                        callback_data += f"_search_{search_query}"
                    pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=callback_data))
                
                current_page = pagination_info.get('page', 1)
                total_pages = pagination_info.get('total_pages', 1)
                pagination_row.append(InlineKeyboardButton(
                    text=f"{current_page}/{total_pages}", 
                    callback_data="noop"
                ))
                
                if pagination_info.get('has_next', False):
                    next_page = pagination_info.get('page', 1) + 1
                    callback_data = f"orders_page_{next_page}"
                    if status_filter != 'all':
                        callback_data += f"_{status_filter}"
                    if search_query:
                        callback_data += f"_search_{search_query}"
                    pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=callback_data))
                
                keyboard.append(pagination_row)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_row = []
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        callback_data = f"orders_refresh"
        if status_filter != 'all':
            callback_data += f"_{status_filter}"
        if search_query:
            callback_data += f"_search_{search_query}"
        control_row.append(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=callback_data))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        control_row.append(InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="contact_support"))
        
        keyboard.append(control_row)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)