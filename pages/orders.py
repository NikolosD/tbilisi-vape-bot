"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

from typing import Dict, Any, Optional
from .base import BasePage
from database import db
from keyboards import get_orders_keyboard, get_order_details_keyboard
from models import OrderStatus
from components.pagination import pagination
from aiogram.types import InlineKeyboardButton
from i18n import _


class OrdersPage(BasePage):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤"""
    
    def __init__(self):
        super().__init__('orders')
    
    async def render(self, user_id: int, **kwargs) -> Dict[str, Any]:
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤"""
        order_id = kwargs.get('order_id')
        page = kwargs.get('page', 1)
        
        if order_id:
            return await self._render_order_details(user_id, order_id)
        else:
            return await self._render_orders_list(user_id, page)
    
    async def _render_orders_list(self, user_id: int, page: int = 1) -> Dict[str, Any]:
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        orders = await db.get_user_orders(user_id)
        
        if not orders:
            from keyboards import get_back_to_menu_keyboard
            return {
                'text': f"üìã <b>{self.get_title(user_id)}</b>\n\n{self.get_empty_message(user_id)}",
                'keyboard': get_back_to_menu_keyboard(user_id=user_id)
            }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_info = pagination.paginate(orders, page)
        
        text = f"üìã <b>{self.get_title(user_id)}</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        text += pagination.get_page_info_text(pagination_info, user_id)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for order in pagination_info['items']:
            status_emoji = self._get_status_emoji(order.status)
            status_text = self._get_status_text(order.status, user_id)
            
            text += f"{status_emoji} <b>{_('orders.order', user_id=user_id)} ‚Ññ{order.order_number}</b>\n"
            text += f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üí∞ {order.total_price}‚Çæ\n"
            text += f"üìä {status_text}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        def order_button_generator(order, index):
            return InlineKeyboardButton(
                text=f"üìã ‚Ññ{order.order_number} - {order.total_price}‚Çæ",
                callback_data=f"order_{order.id}"
            )
        
        additional_buttons = [[
            InlineKeyboardButton(
                text=_("common.main_menu", user_id=user_id),
                callback_data="back_to_menu"
            )
        ]]
        
        keyboard = pagination.create_pagination_keyboard(
            pagination_info=pagination_info,
            callback_prefix="orders_page",
            user_id=user_id,
            item_button_generator=order_button_generator,
            additional_buttons=additional_buttons
        )
        
        return {
            'text': text,
            'keyboard': keyboard
        }
    
    async def _render_order_details(self, user_id: int, order_id: int) -> Dict[str, Any]:
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
        order = await db.get_order(order_id)
        if not order or order.user_id != user_id:
            return await self._render_orders_list(user_id)
        
        order_items = await db.get_order_items(order_id)
        
        status_emoji = self._get_status_emoji(order.status)
        status_text = self._get_status_text(order.status, user_id)
        
        text = f"{status_emoji} <b>{_('orders.order', user_id=user_id)} ‚Ññ{order.order_number}</b>\n\n"
        text += f"üìÖ <b>{_('orders.created', user_id=user_id)}</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üìä <b>{_('orders.status', user_id=user_id)}</b> {status_text}\n\n"
        
        if order.contact:
            text += f"üìû <b>{_('orders.contact', user_id=user_id)}</b> {order.contact}\n"
        if order.address:
            text += f"üìç <b>{_('orders.address', user_id=user_id)}</b> {order.address}\n"
        
        text += f"\n<b>{_('orders.items', user_id=user_id)}</b>\n"
        for item in order_items:
            text += f"‚Ä¢ {item.product_name} √ó {item.quantity} = {item.price * item.quantity}‚Çæ\n"
        
        text += f"\nüí∞ <b>{_('orders.total', user_id=user_id)}</b> {order.total_price}‚Çæ"
        
        if order.admin_comment:
            text += f"\n\nüí¨ <b>{_('orders.admin_comment', user_id=user_id)}</b>\n{order.admin_comment}"
        
        return {
            'text': text,
            'keyboard': get_order_details_keyboard(order)
        }
    
    def _get_status_emoji(self, status) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º status –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        if hasattr(status, 'value'):
            status_str = status.value
        else:
            status_str = status
            
        status_emojis = {
            "waiting_payment": "‚è≥",
            "payment_check": "üí∞",
            "paid": "‚úÖ",
            "shipping": "üöö",
            "delivered": "üì¶",
            "cancelled": "‚ùå"
        }
        return status_emojis.get(status_str, "‚ùì")
    
    def _get_status_text(self, status, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        # status –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫–æ–π, —Ç–∞–∫ –∏ enum, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Å–ª—É—á–∞—è
        if hasattr(status, 'value'):
            status_value = status.value
        else:
            status_value = status
        return _(f"orders.status_{status_value}", user_id=user_id)